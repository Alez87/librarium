{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "schemes": [
    "http",
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "title": "Hubble APIs",
    "version": "v1alpha1"
  },
  "paths": {
    "/v1/health/ping": {
      "get": {
        "description": "Ping Service",
        "tags": [
          "v1"
        ],
        "summary": "Ping Service",
        "operationId": "V1HealthPing",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1.HealthPing"
            }
          }
        }
      }
    },
    "/v1alpha1/audits": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the audit logs",
        "operationId": "v1Alpha1AuditsList",
        "parameters": [
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "string",
            "name": "userUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "projectUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "tenantUid",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceKind",
            "in": "query"
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "query"
          },
          {
            "enum": [
              "create",
              "update",
              "delete",
              "publish",
              "deploy"
            ],
            "type": "string",
            "name": "actionType",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Audits"
            }
          }
        }
      }
    },
    "/v1alpha1/audits/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the audit data",
        "operationId": "v1Alpha1AuditsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Audit"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/audits/{uid}/sysMsg": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the audit system message",
        "operationId": "v1Alpha1AuditsUidGetSysMsg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuditSysMsg"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/audits/{uid}/userMsg": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the user message for the specified audit",
        "operationId": "v1Alpha1AuditsUidMsgUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuditMsgUpdate"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/_login": {
      "post": {
        "description": "User Login",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User Login",
        "operationId": "v1alpha1UsersLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/authenticate": {
      "post": {
        "description": "Authenticates the user",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Authenticates the user",
        "operationId": "v1alpha1Authenticate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.AuthLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/cookie/refresh": {
      "get": {
        "description": "Issues a new token within refresh timeout",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Refresh token API using the cookie data",
        "operationId": "v1alpha1AuthRefreshCookie",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/login": {
      "post": {
        "description": "User Login with mailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User Login with mailId",
        "operationId": "v1alpha1AuthLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.Login"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.LoginResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/logout": {
      "post": {
        "description": "Logs out the user",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Logs out the user",
        "operationId": "v1alpha1AuthLogout",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/auth/org": {
      "get": {
        "description": "Organization verification",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Organization verification",
        "operationId": "v1alpha1AuthOrg",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.LoginResponse"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/org/{org}/saml/callback": {
      "post": {
        "description": "login for sso user",
        "consumes": [
          "application/x-www-form-urlencoded"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "login for sso user",
        "operationId": "V1Alpha1SamlCallback",
        "parameters": [
          {
            "type": "string",
            "name": "SAMLResponse",
            "in": "formData"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "org",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "authToken",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/auth/password/{passwordToken}/activate": {
      "patch": {
        "description": "Resets the user password and sets the user to active",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password activate",
        "operationId": "v1alpha1PasswordActivate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/password/{passwordToken}/reset": {
      "patch": {
        "description": "Resets the user password using password token",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset",
        "operationId": "v1alpha1PasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "password"
              ],
              "properties": {
                "password": {
                  "type": "string",
                  "format": "password"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "passwordToken",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/refresh/{token}": {
      "get": {
        "description": "Issues a new token within refresh timeout",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Refresh token API",
        "operationId": "v1alpha1AuthRefresh",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/auth/services/login": {
      "post": {
        "description": "System service like ally, jet can login to get the JWT for the Hubble interactions",
        "tags": [
          "v1alpha1"
        ],
        "summary": "System service login",
        "operationId": "v1alpha1SystemServicesLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SystemServiceLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/sso/idps": {
      "get": {
        "description": "Returns the list of identity providers",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the list of identity providers",
        "operationId": "V1Alpha1SsoIdps",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.IdentityProviders"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/syslogin": {
      "post": {
        "description": "System admin Login",
        "tags": [
          "v1alpha1"
        ],
        "summary": "System admin Login",
        "operationId": "V1Alpha1SysLogin",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SysLogin"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserToken"
            }
          }
        }
      }
    },
    "/v1alpha1/auth/user/password/reset": {
      "post": {
        "description": "User password request will be sent to the supplied emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset request",
        "operationId": "v1alpha1PasswordResetRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/baremetalmachines": {
      "get": {
        "description": "Returns all the bare metal machines restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the registered bare metal machines",
        "operationId": "v1alpha1BareMetalMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of bare metal machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachines"
            }
          }
        }
      },
      "post": {
        "description": "Provided bare metal machine information is created and registed with the service",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Register the bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesRegister",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/baremetalmachines/summary": {
      "get": {
        "description": "Returns all the bare metal machines restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the registered bare metal machines summary [Experimental]",
        "operationId": "v1alpha1BareMetalMachinesListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of bare metal machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachinesSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/baremetalmachines/{uid}": {
      "get": {
        "description": "Returns a single bare metal machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        }
      },
      "put": {
        "description": "Update the BareMetal machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the BareMetal machine",
        "operationId": "v1alpha1BareMetalMachinesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the bare metal machine for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the bare metal machine",
        "operationId": "v1alpha1BareMetalMachinesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/aws": {
      "get": {
        "description": "Returns all the configured AWS cloud accounts",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the AWS cloud accounts",
        "operationId": "v1alpha1CloudAccountsAwsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccounts"
            }
          }
        }
      },
      "post": {
        "description": "AWS cloud account is created as resource with provided credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create AWS cloud account",
        "operationId": "v1alpha1CloudAccountsAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/aws/{uid}": {
      "get": {
        "description": "Returns a AWS account for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the AWS account",
        "operationId": "v1alpha1CloudAccountsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        }
      },
      "put": {
        "description": "Update the AWS cloud account for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS account",
        "operationId": "v1alpha1CloudAccountsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the AWS account for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the AWS account",
        "operationId": "v1alpha1CloudAccountsAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "CloudAccountAws is patched for the provided cloudAccounts's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the CloudAccount Aws",
        "operationId": "v1alpha1CloudAccountsAwsPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/azure": {
      "get": {
        "description": "Returns all the configured azure cloud accounts",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the azure cloud accounts",
        "operationId": "v1alpha1CloudAccountsAzureList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of azure cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccounts"
            }
          }
        }
      },
      "post": {
        "description": "Azure cloud account is created as resource with provided username / password",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create azure cloud account",
        "operationId": "v1alpha1CloudAccountsAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/azure/{uid}": {
      "get": {
        "description": "Returns a azure account for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the azure cloud account",
        "operationId": "v1alpha1CloudAccountsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        }
      },
      "put": {
        "description": "Update the azure cloud account for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the azure account",
        "operationId": "v1alpha1CloudAccountsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the azure account for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the azure account",
        "operationId": "v1alpha1CloudAccountsAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "CloudAccountAzure is patched for the provided cloudAccounts's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the CloudAccount azure",
        "operationId": "v1alpha1CloudAccountsAzurePatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/gcp": {
      "get": {
        "description": "Returns all the configured gcp cloud accounts",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the gcp cloud accounts",
        "operationId": "v1alpha1CloudAccountsGcpList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of gcp cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccounts"
            }
          }
        }
      },
      "post": {
        "description": "GCP cloud account is created as resource with provided credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create gcp cloud account",
        "operationId": "v1alpha1CloudAccountsGcpCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/gcp/{uid}": {
      "get": {
        "description": "Returns a gcp account for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the gcp cloud account",
        "operationId": "v1alpha1CloudAccountsGcpGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccount"
            }
          }
        }
      },
      "put": {
        "description": "Update the gcp cloud account for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the gcp account",
        "operationId": "v1alpha1CloudAccountsGcpUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the gcp account for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the gcp account",
        "operationId": "v1alpha1CloudAccountsGcpDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "CloudAccountGcp is patched for the provided cloudAccounts's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the CloudAccount gcp",
        "operationId": "v1alpha1CloudAccountsGcpPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/summary": {
      "get": {
        "description": "Returns all the cloud accounts with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the cloud accounts summary",
        "operationId": "v1alpha1CloudAccountsListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/vsphere": {
      "get": {
        "description": "Returns all the configured vSphere cloud accounts",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the vSphere cloud accounts",
        "operationId": "v1alpha1CloudAccountsVsphereList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cloud account items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccounts"
            }
          }
        }
      },
      "post": {
        "description": "vSphere cloud account is created as resource with provided credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create vSphere cloud account",
        "operationId": "v1alpha1CloudAccountsVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}": {
      "get": {
        "description": "Returns a vSphere account for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the vSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        }
      },
      "put": {
        "description": "Update the vSphere cloud account for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the VSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the vSphere account for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the vSphere account",
        "operationId": "v1alpha1CloudAccountsVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "CloudAccountVsphere is patched for the provided cloudAccounts's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the CloudAccount Vsphere",
        "operationId": "v1alpha1CloudAccountsVspherePatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.CloudAccountsPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}/properties/datacenter/resources": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 computecluster for the given overlord account",
        "operationId": "v1alpha1VsphereAccountsUidDatacenterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudaccounts/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "operationId": "v1alpha1VsphereAccountsUidDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/summary": {
      "get": {
        "description": "Returns all the  AWS cloud configs with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the AWS cloud configs summary",
        "operationId": "v1alpha1CloudConfigsAwsListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of AWS cloud config summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsCloudConfigsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}": {
      "get": {
        "description": "Returns a Aws cloud config for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Aws cloud config",
        "operationId": "v1alpha1CloudConfigsAwsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsCloudConfig"
            }
          }
        }
      },
      "put": {
        "description": "Update the Aws cloud config for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS cloud config",
        "operationId": "v1alpha1CloudConfigsAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AwsMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools": {
      "post": {
        "description": "AWS cloud config's machine pool is created in the AWS env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "description": "AWS cloud config's machine pool is updated in the AWS env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the machine pool for the given cloud config",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the machine pool",
        "operationId": "v1alpha1CloudConfigsAwsMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Aws machines restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Aws machines",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Aws machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachines"
            }
          }
        }
      },
      "post": {
        "description": "Created AWS VM will be added to the AWS cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Add the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/aws/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Aws machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets Aws machine",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        }
      },
      "put": {
        "description": "Created AWS VM will be updated to the AWS cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the Aws machine for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Aws machine",
        "operationId": "v1alpha1CloudConfigsAwsPoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/summary": {
      "get": {
        "description": "Returns all the  Azure cloud configs with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Azure cloud configs summary",
        "operationId": "v1alpha1CloudConfigsAzureListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Azure cloud config summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureCloudConfigsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}": {
      "get": {
        "description": "Returns a Azure cloud config for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Azure cloud config",
        "operationId": "v1alpha1CloudConfigsAzureGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureCloudConfig"
            }
          }
        }
      },
      "put": {
        "description": "Update the Azure cloud config for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Azure cloud config",
        "operationId": "v1alpha1CloudConfigsAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AzureMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools": {
      "post": {
        "description": "Azure cloud config's machine pool is created in the Azure env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the Azure cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "description": "Azure cloud config's machine pool is updated in the Azure env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Azure cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the machine pool for the given cloud config",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the machine pool",
        "operationId": "v1alpha1CloudConfigsAzureMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Azure machines restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Azure machines",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Aws machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachines"
            }
          }
        }
      },
      "post": {
        "description": "Created Azure VM will be added to the Azure cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Add the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/azure/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Azure machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets Azure machine",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        }
      },
      "put": {
        "description": "Created Azure VM will be updated to the Azure cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the Azure machine for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Azure machine",
        "operationId": "v1alpha1CloudConfigsAzurePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/baremetal/summary": {
      "get": {
        "description": "Returns all the BareMetal configs with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the BareMetal configs summary",
        "operationId": "v1alpha1CloudConfigsBareMetalListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of BareMetal config summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalConfigsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudconfigs/baremetal/{uid}": {
      "get": {
        "description": "Returns a Bare Metal config for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Bare Metal config",
        "operationId": "v1alpha1CloudConfigsBareMetalGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BareMetalConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/summary": {
      "get": {
        "description": "Returns all the  vSphere cloud configs with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the vSphere cloud configs summary",
        "operationId": "v1alpha1CloudConfigsVsphereListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of vSphere cloud config summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereCloudConfigsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}": {
      "get": {
        "description": "Returns a Vsphere cloud config for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Vsphere cloud config",
        "operationId": "v1alpha1CloudConfigsVsphereGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereCloudConfig"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools": {
      "post": {
        "description": "AWS cloud config's machine pool is created in the AWS env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}": {
      "put": {
        "description": "AWS cloud config's machine pool is updated in the AWS env for the provided input",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the machine pool for the given cloud config",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the machine pool",
        "operationId": "v1alpha1CloudConfigsVsphereMachinePoolDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines": {
      "get": {
        "description": "Returns all the Vsphere machines restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Vsphere machines",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of Vsphere machine items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachines"
            }
          }
        }
      },
      "post": {
        "description": "Created AWS VM will be added to the AWS cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Add the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesAdd",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/cloudconfigs/vsphere/{configUid}/machinePools/{machinePoolName}/machines/{machineUid}": {
      "get": {
        "description": "Returns a Vsphere machine for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets Vsphere machine",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        }
      },
      "put": {
        "description": "Created AWS VM will be updated to the AWS cloud config's machine pool",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the machine to cloud config's machine pool",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereMachine"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the Vsphere machine for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Vsphere machine",
        "operationId": "v1alpha1CloudConfigsVspherePoolMachinesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "configUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machinePoolName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "machineUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/clouds/aws/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if aws account is valid",
        "operationId": "V1alpha1AwsAccountValidate",
        "parameters": [
          {
            "name": "awsCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AwsCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions": {
      "get": {
        "description": "Returns list of aws regions.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of aws regions",
        "operationId": "V1alpha1AwsRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/availabilityzones": {
      "get": {
        "description": "Returns list of aws availability zones.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of aws availability zones.",
        "operationId": "V1alpha1AwsZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsAvailabilityZones"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/copydefaultimages": {
      "post": {
        "description": "Returns aws image id else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get aws image id",
        "operationId": "V1alpha1AwsCopyImageFromDefaultRegion",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "spectroClusterAwsImageTag",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AsyncOperationIdEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/images": {
      "post": {
        "description": "Returns aws image id else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get aws image id",
        "operationId": "V1alpha1AwsFindImage",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "awsImageRequest",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsFindImageRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsImage"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/instancetypes": {
      "get": {
        "description": "Returns list of aws instance types.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of instance types.",
        "operationId": "V1alpha1AwsInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/keypairs": {
      "get": {
        "description": "Returns list of aws key pair names.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of keypair names.",
        "operationId": "V1alpha1AwsKeyPairs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsKeyPairs"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/s3/file/url": {
      "post": {
        "description": "Returns S3 file url",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get S3 File Url",
        "operationId": "V1alpha1AwsS3FileUrlGet",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "name": "AwsS3ParamEntity",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsS3ParamEntity"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.S3FileUrlEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/aws/regions/{region}/vpcs": {
      "get": {
        "description": "Returns list of aws vpcs.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of vpcs.",
        "operationId": "V1alpha1AwsVpcs",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AwsVpcs"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if azure account is valid",
        "operationId": "V1alpha1AzureAccountValidate",
        "parameters": [
          {
            "name": "azureCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1AzureCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions": {
      "get": {
        "description": "Returns list of azure regions.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of azure regions",
        "operationId": "V1alpha1AzureRegions",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/instancetypes": {
      "get": {
        "description": "Returns list of azure instance types.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of instance types.",
        "operationId": "V1alpha1AzureInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/networks": {
      "get": {
        "description": "Returns list of azure virtual network list.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of azure virtual network list.",
        "operationId": "V1alpha1AzureVirtualNetworkList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureVirtualNetworkList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/subscriptions/{subscriptionId}/resourceGroups": {
      "get": {
        "description": "Returns list of azure resource group list.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of azure resource group list.",
        "operationId": "V1alpha1AzureResourceGroupList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "subscriptionId",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureResourceGroupList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/regions/{region}/zones": {
      "get": {
        "description": "Returns azure zone based on region.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the Azure zones by region",
        "operationId": "V1alpha1AzureZones",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureZoneEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/storageaccounttypes": {
      "get": {
        "description": "Returns azure storage account types.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get azure storage account types",
        "operationId": "V1alpha1AzureStorageAccountTypes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureStorageAccountEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/subscriptions": {
      "get": {
        "description": "Returns list of azure subscription list.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of azure subscription list.",
        "operationId": "V1alpha1AzureSubscriptionList",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureSubscriptionList"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/azure/vhds/{vhd}/url": {
      "get": {
        "description": "Returns azure vhd public url by name.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get azure vhd url.",
        "operationId": "V1alpha1AzureVhdUrl",
        "parameters": [
          {
            "type": "string",
            "name": "vhd",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.AzureVhdUrlEntity"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/account/validate": {
      "post": {
        "description": "Returns no contents if account is valid else error.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Check if gcp account is valid",
        "operationId": "V1alpha1GcpAccountValidate",
        "parameters": [
          {
            "name": "gcpCloudAccount",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpCloudAccount"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects": {
      "get": {
        "description": "Returns list of gcp projects.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of gcp projects",
        "operationId": "V1alpha1GcpProjects",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpProjects"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions": {
      "get": {
        "description": "Returns list of gcp regions.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of gcp regions",
        "operationId": "V1alpha1GcpRegions",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpRegions"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions/{region}/instancetypes": {
      "get": {
        "description": "Returns list of gcp instance types.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of instance types.",
        "operationId": "V1alpha1GcpInstanceTypes",
        "parameters": [
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpInstanceTypes"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions/{region}/networks": {
      "get": {
        "description": "Returns list of gcp networks.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of gcp networks",
        "operationId": "V1alpha1GcpNetworks",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpNetworks"
            }
          }
        }
      }
    },
    "/v1alpha1/clouds/gcp/projects/{project}/regions/{region}/zones": {
      "get": {
        "description": "Returns list of gcp zones.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List of gcp zones",
        "operationId": "V1alpha1GcpZones",
        "parameters": [
          {
            "type": "string",
            "name": "cloudAccountUid",
            "in": "query",
            "required": true
          },
          {
            "type": "string",
            "name": "region",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GcpZones"
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles": {
      "get": {
        "description": "Returns all the cluster profiles restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the cluster profiles",
        "operationId": "v1alpha1ClusterProfilesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfiles"
            }
          }
        }
      },
      "post": {
        "description": "Cluster profile is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the cluster profile",
        "operationId": "v1alpha1ClusterProfilesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/summary": {
      "get": {
        "description": "Returns all the cluster profiles with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the cluster profiles summary",
        "operationId": "v1alpha1ClusterProfilesListSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilesSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/{uid}": {
      "get": {
        "description": "Returns a single cluster profile for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a cluster profile",
        "operationId": "v1alpha1ClusterProfilesGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfile"
            }
          }
        }
      },
      "put": {
        "description": "Update the cluster profile for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the cluster profile",
        "operationId": "v1alpha1ClusterProfilesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the cluster profile for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the cluster profile",
        "operationId": "v1alpha1ClusterProfilesDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "Cluster profile is patched for the provided cluster profile's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the Cluster profile",
        "operationId": "v1alpha1ClusterProfilesPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update cluster profile packs ref",
        "operationId": "v1alpha1ClusterProfilesPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packs": {
      "get": {
        "description": "Returns packs information that is associated with the specified cluster profile",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a cluster profile's packs information",
        "operationId": "v1alpha1ClusterProfilesUidPacksGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePacksEntities"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/clusterprofiles/{uid}/packs/{packName}/versions/{packVersion}/values": {
      "get": {
        "description": "Returns the cluster profile pack values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a cluster profile's pack values",
        "operationId": "v1alpha1ClusterProfilesUidPacksValuesGet",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster profile pack values",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValuesList"
            }
          }
        }
      },
      "put": {
        "description": "Update the cluster profile pack values for the specified uid and pack name",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the cluster profile pack values",
        "operationId": "v1alpha1ClusterProfilesPacksValuesUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValues"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "description": "Cluster profile pack values is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the cluster profile pack values",
        "operationId": "v1alpha1ClusterProfilesPacksValuesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "cluster profile uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ClusterProfilePackValues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/clusterprofiles/{uid}/publish": {
      "patch": {
        "description": "Publish the draft cluster profile with next revision, the current draft cluster profile will be marked to published\nand the draft cluster profile will be set to null in the cluster profile template.\n",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Publish the cluster profile",
        "operationId": "v1alpha1ClusterProfilesPublish",
        "responses": {
          "204": {
            "description": "Cluster profile published successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/crypto/decrypt/key/{key}/data/{data}": {
      "get": {
        "description": "Returns the encrypted data",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the encrypted data",
        "operationId": "V1Alpha1DecryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/crypto/encrypt/key/{key}/data/{data}": {
      "get": {
        "description": "Returns the encrypted data",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the encrypted data",
        "operationId": "V1Alpha1EncryptGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.CrypticResponse"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "key",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "data",
          "in": "path",
          "required": true
        },
        {
          "type": "boolean",
          "name": "base64",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/crypto/hash": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets hash for the hutil services",
        "operationId": "V1Alpha1CryptoHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Hash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/dashboard/spectroclusters": {
      "get": {
        "description": "Returns all the clusters with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the spectro cluster summary",
        "operationId": "v1alpha1SpectroClustersSummary",
        "parameters": [
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 60,
            "description": "Metric period in minutes defines latest metrics by period",
            "name": "metricPeriod",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClustersSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/dashboard/spectroclusters/{uid}": {
      "get": {
        "description": "Returns the cluster for a given uid with limited information restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the spectro cluster summary",
        "operationId": "v1alpha1SpectroClustersSummaryUid",
        "responses": {
          "200": {
            "description": "An spectro cluster summary",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterUidSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/hash": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets hash for the error reference",
        "operationId": "V1Alpha1ErrLogsHashGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Hash"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "data",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the err logs",
        "operationId": "V1Alpha1ErrLogsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ErrLogs"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/errlogs/{ref}/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the err log for the given reference",
        "operationId": "V1Alpha1ErrLogsRefGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ErrLog"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "ref",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/events/components": {
      "get": {
        "description": "Returns all the events restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the component events",
        "operationId": "v1alpha1EventsComponentsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component events items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "post": {
        "description": "Create the new event",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the event",
        "operationId": "v1alpha1EventsComponentsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Event"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/events/components/bulk": {
      "post": {
        "description": "Create all the component events in single request",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the component events in bulk",
        "operationId": "v1alpha1EventsComponentsCreateBulk",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.BulkEvents"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uids"
            }
          }
        }
      }
    },
    "/v1alpha1/events/components/{objectKind}/{objectUid}": {
      "get": {
        "description": "Returns all the components events restricted to the related object type and uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the components events for the given related object",
        "operationId": "v1alpha1EventsComponentsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete all the components events for the given related object",
        "operationId": "v1alpha1EventsComponentsObjTypeUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/events/internal/subscribe": {
      "put": {
        "description": "Subscribe components events with the message broker",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Subscribe components events with the message broker",
        "operationId": "v1alpha1EventsComponentsSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1alpha1/events/{eventUid}/components/{objectKind}/{objectUid}/context": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the components events for the given related object for given window period",
        "operationId": "v1alpha1EventsUidComponentsObjTypeUidContextList",
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Events"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "eventUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "maximum": 30,
          "minimum": 1,
          "type": "integer",
          "format": "int32",
          "default": 3,
          "description": "window period in minutes, will provide before \u0026 after events of window period duration",
          "name": "windowPeriod",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/files/image/{uid}": {
      "get": {
        "description": "Returns the specified image",
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the image",
        "operationId": "v1alpha1ImageUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "file"
            },
            "headers": {
              "Content-Type": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/files/images": {
      "post": {
        "description": "Given image is stored in repo",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Store an image",
        "operationId": "v1alpha1Images",
        "parameters": [
          {
            "type": "file",
            "name": "imageFile",
            "in": "formData"
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/git/webhook/configuration": {
      "post": {
        "description": "Sync configuration when there is an event occurred in the Git",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Sync configuration with the Git",
        "operationId": "v1alpha1GitWebhookConfigurationCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitPrEvent"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/git/webhook/release": {
      "post": {
        "description": "Sync service release version when there is an event occurred in the Git",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Sync service release version with the Git",
        "operationId": "v1alpha1GitWebhookReleaseCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitPushEvent"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/health/msgbroker/connections": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "get active msg broker connections",
        "operationId": "V1Alpha1MsgBrokerConnections",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MsgBrokerConnections"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "DuplicationCount",
            "LastActivity",
            "UpTime",
            "SubscriptionCount"
          ],
          "type": "string",
          "name": "sortBy",
          "in": "query"
        },
        {
          "type": "string",
          "name": "subscriptionName",
          "in": "query"
        },
        {
          "type": "string",
          "name": "accountUid",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/health/msgbroker/live": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "get active msg broker health",
        "operationId": "V1Alpha1MsgBrokerHealth",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MsgBrokerHealth"
            }
          }
        }
      }
    },
    "/v1alpha1/jobs/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the scheduler jobs",
        "operationId": "V1Alpha1SchedulerJobList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJobs"
            }
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "update scheduler job",
        "operationId": "V1Alpha1SchedulerJobUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.SchedulerJob"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/jobs/{job}/token/{token}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "execute on demand",
        "operationId": "V1Alpha1SchedulerJobName",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "token",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "job",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/metrics/{resourceKind}/values": {
      "get": {
        "description": "Returns all the metrics for a given resource kind",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the metrics",
        "operationId": "v1alpha1MetricsList",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          },
          {
            "type": "string",
            "name": "spectroClusterUid",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MetricTimeSeriesList"
            }
          }
        }
      }
    },
    "/v1alpha1/metrics/{resourceKind}/{resourceUid}/values": {
      "get": {
        "description": "Returns the metrics for a given resource uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List the metrics of a resource",
        "operationId": "v1alpha1MetricsUidList",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "default": "all",
            "description": "multiple metric kinds can be provided with comma separated",
            "name": "metricKind",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "startTime",
            "in": "query"
          },
          {
            "type": "string",
            "format": "date-time",
            "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
            "name": "endTime",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "default": 1,
            "description": "period in minutes, group the data point by the specified period",
            "name": "period",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "includeMasterMachines in boolean, group the data point by including master nodes if set to true",
            "name": "includeMasterMachines",
            "in": "query"
          },
          {
            "type": "boolean",
            "default": false,
            "description": "if true then api returns only aggregation values, else api returns all data points by default",
            "name": "discrete",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of metric items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.MetricTimeSeries"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the Metrics by Resource Uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Metrics",
        "operationId": "v1alpha1MetricsUidDelete",
        "parameters": [
          {
            "enum": [
              "spectrocluster",
              "machine",
              "project"
            ],
            "type": "string",
            "name": "resourceKind",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "resourceUid",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      }
    },
    "/v1alpha1/nats/config": {
      "get": {
        "description": "Returns Nats Configuration",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get Nats Configuration",
        "operationId": "V1Alpha1NatsConfiguration",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsConfiguration"
            }
          }
        }
      }
    },
    "/v1alpha1/nats/credentials": {
      "post": {
        "description": "Returns Nats Credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get Nats Credentials",
        "operationId": "V1Alpha1NatsCredentials",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsCredentialRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NatsCredentials"
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/": {
      "get": {
        "description": "Returns all the notifications restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the notifications",
        "operationId": "v1alpha1NotificationsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of notification items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Notifications"
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/events": {
      "post": {
        "description": "Create the new notification event",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the notification event",
        "operationId": "v1alpha1NotificationsEventCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.NotificationEvent"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/notifications/{objectKind}/{objectUid}": {
      "get": {
        "description": "Returns all the notifications restricted to the related object type and uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the notifications for the given related object",
        "operationId": "v1alpha1NotificationsObjTypeUidList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of component event items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Notifications"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "objectKind",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "objectUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "isDone",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/notifications/{uid}/ack": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Acknowledge the notification",
        "operationId": "v1alpha1NotificationsUidAck",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/notifications/{uid}/done": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Mark the notification's action as done",
        "operationId": "v1alpha1NotificationsUidDone",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/pairing/code": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the pairing code for the overload",
        "operationId": "v1alpha1OverlordsPairingCode",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PairingCode"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the overlords owned by the tenant",
        "operationId": "v1alpha1OverlordsList",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Overlords"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere/manifest": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns the manifests required for the overlord installation",
        "operationId": "v1alpha1OverlordsVsphereManifest",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordManifest"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "pairingCode",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/ova": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Returns overlord's ova information",
        "operationId": "v1alpha1OverlordsVsphereOvaGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverloadVsphereOva"
            }
          }
        }
      }
    },
    "/v1alpha1/overlords/vsphere/{uid}": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the overlord for the given uid",
        "operationId": "v1alpha1OverlordsUidGet",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Overlord"
            }
          }
        }
      },
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the overlord",
        "operationId": "v1alpha1OverlordsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "delete the overlord",
        "operationId": "v1alpha1OverlordsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/account": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "update the vSphere cloudaccount for the overlord",
        "operationId": "V1alpha1OverlordsUidVsphereAccountUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereAccountEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "create the vSphere cloudaccount for the overlord",
        "operationId": "V1alpha1OverlordsUidVsphereAccountCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereAccountCreate"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/account/validate": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "validate the vSphere cloudaccount for the overlord",
        "operationId": "V1alpha1OverlordsUidVsphereAccountValidate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "properties": {
                "account": {
                  "$ref": "#/definitions/v1alpha1VsphereCloudAccount"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/cloudconfig": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "update the vSphere cloud config for the overlord",
        "operationId": "V1alpha1OverlordsUidVsphereCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "create the vSphere cloud config for the overlord",
        "operationId": "V1alpha1OverlordsUidVsphereCloudConfigCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.OverlordVsphereCloudConfig"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/properties/datacenter/resources": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 computecluster for the given overlord account",
        "operationId": "v1alpha1OverlordsUidVsphereDatacenterRes",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereDatacenterResources"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "datacenter",
          "in": "query",
          "required": true
        },
        {
          "type": "string",
          "name": "computecluster",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/properties/datacenters": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the vSphere datacenters \u0026 datacluster for the given overlord account",
        "operationId": "v1alpha1OverlordsUidVsphereDatacenters",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.VsphereDatacenters"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/overlords/vsphere/{uid}/reset": {
      "put": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "reset the overlord by disaaociating the overlord resources",
        "operationId": "V1alpha1OverlordsUidReset",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/packs": {
      "get": {
        "description": "Returns all the pack summary.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the pack summaries",
        "operationId": "v1alpha1PacksSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of pack summary items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackSummaries"
            }
          }
        }
      },
      "delete": {
        "description": "Delete all the pack summary.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete all the pack summaries",
        "operationId": "v1alpha1PacksSummaryDelete",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1DeleteMeta"
            }
          }
        }
      }
    },
    "/v1alpha1/packs/{packName}/registries/{registryUid}": {
      "get": {
        "description": "Returns all the packs grouped by tags for the specified pack registry and name",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the packs by tags",
        "operationId": "v1alpha1PacksNameRegistryUidList",
        "responses": {
          "200": {
            "description": "Pack items organized by tags",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "registryUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "description": "pack name",
          "name": "packName",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "default": "all",
          "name": "cloudType",
          "in": "query"
        },
        {
          "type": "string",
          "name": "layer",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/packs/{uid}": {
      "get": {
        "description": "Returns a pack for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get the pack for uid",
        "operationId": "v1alpha1PacksUid",
        "responses": {
          "200": {
            "description": "A pack for the specified uid",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackTagEntity"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/permissions": {
      "get": {
        "description": "Returns all the supported permissions",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the permissions",
        "operationId": "v1alpha1PermissionsList",
        "parameters": [
          {
            "enum": [
              "system",
              "tenant",
              "project"
            ],
            "type": "string",
            "name": "scope",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of permissions",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Permissions"
            }
          }
        }
      }
    },
    "/v1alpha1/plans": {
      "get": {
        "description": "Returns a list of Plans",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Lists the Plans",
        "operationId": "v1alpha1PlansList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plans"
            }
          }
        }
      },
      "post": {
        "description": "A plan is created",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Plan",
        "operationId": "v1alpha1PlansCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/plans/{uid}": {
      "get": {
        "description": "Returns a single plan for the given context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a plan",
        "operationId": "v1alpha1PlansUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plan"
            }
          }
        }
      },
      "put": {
        "description": "Update a plan for thr given context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update a plan",
        "operationId": "v1alpha1PlansUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Plan"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/projects": {
      "get": {
        "description": "Returns all the projects",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the projects",
        "operationId": "v1alpha1ProjectsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of projects",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Projects"
            }
          }
        }
      },
      "post": {
        "description": "Project is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create a project",
        "operationId": "v1alpha1ProjectsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/projects/summary": {
      "get": {
        "description": "Returns a list of project summaries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Project Summary list",
        "operationId": "v1alpha1ProjectsSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/projects/{uid}": {
      "get": {
        "description": "Returns a single project for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a project",
        "operationId": "v1alpha1ProjectsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Project"
            }
          }
        }
      },
      "put": {
        "description": "Project is updated for the given spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "update a project",
        "operationId": "v1alpha1ProjectsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Deletes the project for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the project",
        "operationId": "v1alpha1ProjectsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "Project is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the project",
        "operationId": "v1alpha1ProjectsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/registries/git": {
      "get": {
        "description": "Returns all the configured Git registries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Git registries",
        "operationId": "v1alpha1RegistriesGitList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistries"
            }
          }
        }
      },
      "post": {
        "description": "Git registry is created as resource with provided credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Git registry",
        "operationId": "v1alpha1RegistriesGitCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/git/summary": {
      "get": {
        "description": "Returns all the git registries restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the git registries as summary",
        "operationId": "v1alpha1RegistriesGitSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/git/{uid}": {
      "get": {
        "description": "Returns a Git registry for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Git registry",
        "operationId": "v1alpha1RegistriesGitGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        }
      },
      "put": {
        "description": "Update the Git registry for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Git registry",
        "operationId": "v1alpha1RegistriesGitUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.GitRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the Git registry for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Git registry",
        "operationId": "v1alpha1RegistriesGitDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "RegistryGit is patched for the provided registry's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the Git registry",
        "operationId": "v1alpha1RegistriesGitPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.RegistriesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/registries/pack": {
      "get": {
        "description": "Returns all the configured Pack registries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the Pack registries",
        "operationId": "v1alpha1RegistriesPackList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistries"
            }
          }
        }
      },
      "post": {
        "description": "Pack registry is created as resource with provided credentials",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Pack registry",
        "operationId": "v1alpha1RegistriesPackCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/pack/summary": {
      "get": {
        "description": "Returns all the pack registries restricted to the user role and filters.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the pack registries as summary",
        "operationId": "v1alpha1RegistriesPackSummaryList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of registry items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistriesSummary"
            }
          }
        }
      },
      "parameters": [
        {
          "enum": [
            "system",
            "tenant",
            "all"
          ],
          "type": "string",
          "default": "all",
          "name": "scope",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/registries/pack/{uid}": {
      "get": {
        "description": "Returns a Pack registry for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Pack registry",
        "operationId": "v1alpha1RegistriesPackGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        }
      },
      "put": {
        "description": "Update the Pack registry for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Pack registry",
        "operationId": "v1alpha1RegistriesPackUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.PackRegistry"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the Pack registry for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the Pack registry",
        "operationId": "v1alpha1RegistriesPackDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "RegistryPack is patched for the provided registry's meta information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the Pack registry",
        "operationId": "v1alpha1RegistriesPackPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.RegistriesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/roles": {
      "get": {
        "description": "Returns a list of Roles based on the user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Lists the Roles",
        "operationId": "v1alpha1RolesList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Roles"
            }
          }
        }
      },
      "post": {
        "description": "A role is created for the given tenant",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Role",
        "operationId": "v1alpha1RolesCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/roles/{uid}": {
      "get": {
        "description": "Returns a single role for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a role",
        "operationId": "v1alpha1RolesUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        }
      },
      "put": {
        "description": "Update a role for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update a role",
        "operationId": "v1alpha1RolesUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Role"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Deletes a Role for the user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Deletes the Role",
        "operationId": "v1alpha1RolesUidDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "description": "Role is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the role",
        "operationId": "v1alpha1RolesUidpatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.RolePatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/services/{serviceName}/version": {
      "get": {
        "description": "Returns a latest version for a given service name.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a service version",
        "operationId": "v1alpha1ServiceVersionGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceVersion"
            }
          }
        }
      },
      "put": {
        "description": "Update the version for a given service",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Service version",
        "operationId": "v1alpha1ServiceVersionUpdate",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceVersion"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "description": "Create a version info for a given service",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Service version",
        "operationId": "v1alpha1ServiceVersionCreate",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceVersion"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/services/{serviceName}/versions/{version}/manifest": {
      "get": {
        "description": "Returns a service manifest for a given service name and version",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a service manifest",
        "operationId": "v1alpha1ServiceManifestGet",
        "parameters": [
          {
            "enum": [
              "ally",
              "jet",
              "palette",
              "ambit"
            ],
            "type": "string",
            "description": "service name",
            "name": "serviceName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "service version",
            "name": "version",
            "in": "path",
            "required": true
          },
          {
            "enum": [
              "apply",
              "delete"
            ],
            "type": "string",
            "description": "action type",
            "name": "action",
            "in": "query",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ServiceManifest"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters": {
      "get": {
        "description": "Returns all the clusters restricted to the user role and filters",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the clusters",
        "operationId": "v1alpha1SpectroClustersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of cluster items",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusters"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/acquire": {
      "get": {
        "description": "Returns a spectro cluster object",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Acquires a spectro cluster with a lock",
        "operationId": "V1Alpha1SpectroClusterAcquire",
        "parameters": [
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusters"
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/aws": {
      "post": {
        "description": "Cluster is created in the AWS env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the AWS cluster",
        "operationId": "v1alpha1SpectroClustersAwsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/aws/{uid}": {
      "put": {
        "description": "Update the AWS Cluster for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS Cluster",
        "operationId": "v1alpha1SpectroClustersAwsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAwsClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the cluster",
        "operationId": "v1alpha1SpectroClustersAwsDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/aws/{uid}/cloudconfig": {
      "put": {
        "description": "Cluster's cloudconfig is updated in the AWS env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the AWS cluster cloud config",
        "operationId": "v1alpha1SpectroClustersAwsCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AwsMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/azure": {
      "post": {
        "description": "Cluster is created in the Azure env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the Azure cluster",
        "operationId": "v1alpha1SpectroClustersAzureCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/azure/{uid}": {
      "put": {
        "description": "Update the Azure Cluster for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Azure Cluster",
        "operationId": "v1alpha1SpectroClustersAzureUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroAzureClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the cluster",
        "operationId": "v1alpha1SpectroClustersAzureDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/azure/{uid}/cloudconfig": {
      "put": {
        "description": "Cluster's cloudconfig is updated in the Azure env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Azure cluster cloud config",
        "operationId": "v1alpha1SpectroClustersAzureCloudConfigUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1AzureMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/baremetalmachine": {
      "post": {
        "description": "Cluster is created in the BareMetal Machine env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the BareMetal Machine cluster",
        "operationId": "v1alpha1SpectroClustersBmMachineCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroBareMetalClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/baremetalmachine/{uid}": {
      "put": {
        "description": "Update the BareMetal Machine Cluster for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the BareMetal Machine Cluster",
        "operationId": "v1alpha1SpectroClustersBmMachineUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroBareMetalClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the cluster",
        "operationId": "v1alpha1SpectroClustersBmMachineDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/baremetalmachine/{uid}/cloudconfig": {
      "put": {
        "description": "Update the BareMetal Machine env configuration for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the BareMetal Machine cluster's configuration",
        "operationId": "v1alpha1SpectroClustersBmMachineCloudConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroBareMetalClusterActivateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/vsphere": {
      "post": {
        "description": "Cluster is created in the vSphere env for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the vSphere cluster",
        "operationId": "v1alpha1SpectroClustersVsphereCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/vsphere/{uid}": {
      "put": {
        "description": "Update the vSphere Cluster for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the vSphere Cluster",
        "operationId": "v1alpha1SpectroClustersVsphereUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroVsphereClusterEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the vSphere cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the vSphere cluster",
        "operationId": "v1alpha1SpectroClustersVsphereDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/vsphere/{uid}/cloudconfig": {
      "post": {
        "description": "Update the vSphere env cloud config for the provided spec with default values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the vSphere cluster's cloud config",
        "operationId": "v1alpha1SpectroClustersVsphereCloudConfig",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1VsphereMachinePoolConfigEntities"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}": {
      "get": {
        "description": "Returns a single cluster for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a cluster",
        "operationId": "v1alpha1SpectroClustersGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroCluster"
            }
          }
        }
      },
      "delete": {
        "description": "Delete the cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the cluster",
        "operationId": "v1alpha1SpectroClustersDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/assets": {
      "post": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Post the assets for the cluster",
        "operationId": "v1alpha1SpectroClustersUidAssets",
        "responses": {
          "204": {
            "description": "Posted the spectro cluster assets"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "name": "body",
          "in": "body",
          "schema": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterAssetEntity"
          }
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/assets/kubeconfig": {
      "get": {
        "produces": [
          "application/octet-stream"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the cluster's kube config file",
        "operationId": "v1alpha1SpectroClustersUidKubeConfig",
        "responses": {
          "200": {
            "description": "download file",
            "schema": {
              "type": "string",
              "format": "binary"
            },
            "headers": {
              "Content-Disposition": {
                "type": "string"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/cleanup": {
      "delete": {
        "description": "Delete the cluster for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Cleanup the resources of the deleted cluster",
        "operationId": "v1alpha1SpectroClustersCleanUp",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/packRefs": {
      "patch": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update cluster packs ref",
        "operationId": "v1alpha1SpectroClustersPacksRefUpdate",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "name": "notify",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/packs/{packName}/versions/{packVersion}/values": {
      "get": {
        "description": "Returns the spectro cluster pack values",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a spectro cluster's pack values",
        "operationId": "v1alpha1SpectroClustersUidPacksValuesGet",
        "parameters": [
          {
            "type": "string",
            "description": "spectro cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "An array of spectro cluster pack values",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValuesList"
            }
          }
        }
      },
      "put": {
        "description": "Update the spectro cluster pack values for the specified uid and pack name",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the spectro cluster pack values",
        "operationId": "v1alpha1SpectroClustersPacksValuesUpdate",
        "parameters": [
          {
            "type": "string",
            "description": "spectro cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValues"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "description": "Spectro Cluster pack values is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the spectro cluster pack values",
        "operationId": "v1alpha1SpectroClustersPacksValuesCreate",
        "parameters": [
          {
            "type": "string",
            "description": "spectro cluster uid",
            "name": "uid",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack name",
            "name": "packName",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "description": "pack version",
            "name": "packVersion",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterPackValues"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/spectroclusters/{uid}/profile": {
      "patch": {
        "description": "Replace the cluster cluster profile for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Replace the cluster cluster profile",
        "operationId": "v1alpha1SpectroClustersPatchProfile",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status": {
      "get": {
        "description": "Returns the status of spectro cluster",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Get status",
        "operationId": "v1alpha1SpectroClustersGetStatus",
        "responses": {
          "200": {
            "description": "A spectro cluster status",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterStatus"
            }
          }
        }
      },
      "put": {
        "description": "Update the Spectro Cluster status for the specified cluster uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Cluster status",
        "operationId": "v1alpha1SpectroClustersUpdateStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterStatusEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/condition": {
      "put": {
        "description": "Upsert cluster condition for the specified cluster status",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Cluster status condition",
        "operationId": "v1alpha1SpectroClustersUpdateStatusCondition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1ClusterCondition"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/endpoints": {
      "put": {
        "description": "Upsert cluster service for the specified cluster status",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Cluster status service",
        "operationId": "v1alpha1SpectroClustersUpdateStatusEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1ApiEndpoint"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/spectroclusters/{uid}/status/services": {
      "put": {
        "description": "Upsert cluster service for the specified cluster status",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update the Cluster status service",
        "operationId": "v1alpha1SpectroClustersUpdateStatusServices",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1LoadBalancerService"
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/teams": {
      "get": {
        "description": "Returns all the teams",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the teams",
        "operationId": "v1alpha1TeamsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of teams",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Teams"
            }
          }
        }
      },
      "post": {
        "description": "Team is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create a team",
        "operationId": "v1alpha1TeamsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/teams/summary": {
      "get": {
        "description": "Returns a list of team summaries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Team Summary list",
        "operationId": "v1alpha1TeamsSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TeamsSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/teams/{uid}": {
      "get": {
        "description": "Returns a single team for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a team",
        "operationId": "v1alpha1TeamsUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        }
      },
      "put": {
        "description": "Update a team for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update a team",
        "operationId": "v1alpha1TeamsUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Team"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the team for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the team",
        "operationId": "v1alpha1TeamsUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "Team is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the team",
        "operationId": "v1alpha1TeamsUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.TeamPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/teams/{uid}/projects": {
      "get": {
        "description": "Returns a Team with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the Team Projects and Roles information",
        "operationId": "v1alpha1TeamsProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "Team is updated with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the projects and roles for team",
        "operationId": "v1alpha1TeamsProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants": {
      "get": {
        "description": "Returns all the tenants",
        "tags": [
          "v1alpha1"
        ],
        "summary": "List all the tenants",
        "operationId": "v1alpha1TenantsList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "An array of tenants",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Tenants"
            }
          }
        }
      },
      "post": {
        "description": "Tenant is created for the provided spec",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create the tenant",
        "operationId": "v1alpha1TenantsCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/tenants/internal/msgbroker/accounts/reinit": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "reinit tenants msg broker accounts",
        "operationId": "V1Alpha1TenantsInternalMsgBrokerAccountsReInit",
        "responses": {
          "200": {
            "description": "(empty)",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantsAccountsNas"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "boolean",
          "name": "ignoreErrors",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}": {
      "get": {
        "description": "Returns a single tenant for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a tenant",
        "operationId": "v1alpha1TenantsGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Tenant"
            }
          }
        }
      },
      "put": {
        "description": "A tenant is updated",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update Tenant",
        "operationId": "v1alpha1TenantsUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Tenant"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the tenant for the given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the tenant",
        "operationId": "v1alpha1TenantsDelete",
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "patch": {
        "description": "Tenant is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the tenant",
        "operationId": "v1alpha1TenantsPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/plan": {
      "post": {
        "description": "A plan is created for a particular tenant",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create Tenant Plan",
        "operationId": "v1alpha1TenantUidPlansCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1Plan"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/plans/usage/monthly": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a tenant's monthly planUsage grouped by projects",
        "operationId": "v1Alpha1PlansUsageMonthlyGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PlanMonthlyUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date",
          "name": "endDate",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date",
          "name": "startDate",
          "in": "query",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/saml/metadata": {
      "get": {
        "description": "Returns the service provider metadata and Saml Spec for the tenant",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the service provider metadata and Saml Spec for tenant",
        "operationId": "V1Alpha1TenantUidSamlSpec",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.TenantSamlSpec"
            }
          }
        }
      },
      "post": {
        "description": "Given federation metadata is stored in repo",
        "consumes": [
          "multipart/form-data"
        ],
        "tags": [
          "v1alpha1"
        ],
        "summary": "Store the federation metadata of tenant",
        "operationId": "V1Alpha1TenantUidFmd",
        "parameters": [
          {
            "type": "file",
            "description": "The file to upload.",
            "name": "federationMetaDataFile",
            "in": "formData"
          },
          {
            "type": "string",
            "description": "The federationMetadata to upload.",
            "name": "federationMetaData",
            "in": "formData"
          },
          {
            "type": "boolean",
            "description": "The isSsoEnabled flag.",
            "name": "isSsoEnabled",
            "in": "formData",
            "required": true
          },
          {
            "type": "string",
            "description": "The identityProvider name.",
            "name": "identityProvider",
            "in": "formData",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/usage/cpuCoreHours": {
      "get": {
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a tenant's cpu corehours usages grouped by projects",
        "operationId": "v1Alpha1UsageCpuCoreHours",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1PlanCpuCoreHoursUsages"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "endTime",
          "in": "query"
        },
        {
          "type": "string",
          "format": "date-time",
          "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
          "name": "startTime",
          "in": "query"
        }
      ]
    },
    "/v1alpha1/tenants/{tenantUid}/user": {
      "get": {
        "description": "Returns a single tenant's user for the specified uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets a tenant's user",
        "operationId": "v1alpha1TenantsUserGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1User"
            }
          }
        }
      },
      "put": {
        "description": "A tenant user object is updated",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update Tenant user",
        "operationId": "v1alpha1TenantsUserUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1User"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "post": {
        "description": "A user is created for the given tenant",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create user using sysadmin privileges on behalf of the tenant",
        "operationId": "v1alpha1TenantsUserCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "tenantUid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/timeseries/internal/subscribe": {
      "put": {
        "description": "Subscribe timeseries with the message broker",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Subscribe timeseries with the message broker",
        "operationId": "v1alpha1TimeseriesSubscriberUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1MsgSubscriber"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      }
    },
    "/v1alpha1/users": {
      "get": {
        "description": "Lists users the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Lists users",
        "operationId": "v1alpha1UsersList",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.Users"
            }
          }
        }
      },
      "post": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Create User",
        "operationId": "v1alpha1UsersCreate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserEntity"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Created successfully",
            "schema": {
              "$ref": "#/definitions/v1Uid"
            },
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/me": {
      "get": {
        "description": "Returns a User with permissions with scopes",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the User ACL information",
        "operationId": "v1alpha1UsersMeGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserMe"
            }
          }
        }
      }
    },
    "/v1alpha1/users/password/reset": {
      "patch": {
        "description": "User password request will be sent to the supplied emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset request using the email id",
        "operationId": "v1alpha1UsersEmailPasswordReset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "emailId"
              ],
              "properties": {
                "emailId": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      }
    },
    "/v1alpha1/users/summary": {
      "get": {
        "description": "Returns a list of user summaries",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the User Summary list",
        "operationId": "v1alpha1UsersSummary",
        "parameters": [
          {
            "type": "string",
            "description": "Set of fields to be presented in the response with values. The feilds are comma separated. Eg: metadata.uid,metadata.name",
            "name": "fields",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Filters can be combined with AND, OR operators with field path name. Eg: metadata.name=TestServiceANDspec.cloudType=aws\n\nServer will be restricted to certain fields based on the indexed data for each resource.",
            "name": "filters",
            "in": "query"
          },
          {
            "type": "string",
            "description": "Specify the fields with sort order. 1 indicates ascending and -1 for descending. Eg: orderBy=metadata.name=1,metadata.uid=-1",
            "name": "orderBy",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int64",
            "default": 100,
            "description": "limit is a maximum number of responses to return for a list call.\nIf more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results.",
            "name": "limit",
            "in": "query"
          },
          {
            "type": "string",
            "description": "continue token for the dataset",
            "name": "continue",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UsersSummary"
            }
          }
        }
      }
    },
    "/v1alpha1/users/{uid}": {
      "get": {
        "description": "Returns a User for the specified uid.",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the User",
        "operationId": "v1alpha1UsersUidGet",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.User"
            }
          }
        }
      },
      "put": {
        "description": "A user is created for the given user context",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Update User",
        "operationId": "v1alpha1UsersUidUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserUpdateEntity"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "delete": {
        "description": "Delete the User for given uid",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Delete the User",
        "operationId": "v1alpha1UsersUidDelete",
        "responses": {
          "204": {
            "description": "The resource was deleted successfully"
          }
        }
      },
      "patch": {
        "description": "User is patched for the specified information",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Patch the User",
        "operationId": "v1alpha1UsersUidPatch",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/internal/token": {
      "get": {
        "description": "Internal API for automation to get the user password token to reset the password (required sysadmin jwt token)",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the User password token to reset the password restricted to sysadmin",
        "operationId": "v1alpha1UsersPasswordToken",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserActivateInfo"
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/password/change": {
      "patch": {
        "description": "User password change request via current password",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password change request using the user uid",
        "operationId": "v1alpha1UsersUidPasswordChange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "required": [
                "currentPassword",
                "newPassword"
              ],
              "properties": {
                "currentPassword": {
                  "type": "string"
                },
                "newPassword": {
                  "type": "string"
                }
              }
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/password/reset": {
      "patch": {
        "description": "User password reset request, will send the password reset option through the emailId",
        "tags": [
          "v1alpha1"
        ],
        "summary": "User password reset request using the user uid",
        "operationId": "v1alpha1UsersUidPasswordReset",
        "responses": {
          "204": {
            "description": "Ok reponse without content",
            "headers": {
              "AuditUid": {
                "type": "string",
                "description": "Audit uid for the request"
              }
            }
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/projects": {
      "get": {
        "description": "Returns a User with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the User Projects and Roles information",
        "operationId": "v1alpha1UsersProjectRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with projects and roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the projects and roles for user",
        "operationId": "v1alpha1UsersProjectRolesPut",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.ProjectRolesPatch"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    },
    "/v1alpha1/users/{uid}/roles": {
      "get": {
        "description": "Returns roles clubbed from team",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Gets the individual and team roles for a user",
        "operationId": "v1alpha1UsersUidRoles",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserRolesEntity"
            }
          }
        }
      },
      "put": {
        "description": "User is updated with roles",
        "tags": [
          "v1alpha1"
        ],
        "summary": "Updates the roles for user",
        "operationId": "v1alpha1UsersUidRolesUpdate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/v1alpha1.UserRoleUIDs"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "The resource was updated successfully"
          }
        }
      },
      "parameters": [
        {
          "type": "string",
          "name": "uid",
          "in": "path",
          "required": true
        }
      ]
    }
  },
  "definitions": {
    "v1.HealthPing": {
      "type": "object",
      "properties": {
        "msg": {
          "type": "string"
        }
      }
    },
    "v1.HttpPatch": {
      "type": "object",
      "required": [
        "op",
        "path"
      ],
      "properties": {
        "from": {
          "description": "A path to the pointer from which reference will be taken",
          "type": "string"
        },
        "op": {
          "description": "The operation to be performed",
          "type": "string",
          "enum": [
            "add",
            "remove",
            "replace",
            "move",
            "copy"
          ]
        },
        "path": {
          "description": "A path to the pointer on which operation will be done",
          "type": "string"
        },
        "value": {
          "description": "The value to be used within the operations.",
          "type": "object"
        }
      }
    },
    "v1.ListMetaData": {
      "description": "ListMeta describes metadata for the resource listing",
      "type": "object",
      "properties": {
        "continue": {
          "description": "Next token for the pagination. Next token is equal to empty string indicates end of result set.",
          "type": "string"
        },
        "count": {
          "description": "Total count of the resources which might change during pagination based on the resources addition or deletion",
          "type": "integer"
        }
      }
    },
    "v1.ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "description": "CreationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. Clients may not set this value. It is represented in RFC3339 form and is in UTC.\n\nPopulated by the system. Read-only. Null for lists. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.Time"
        },
        "deletionTimestamp": {
          "description": "DeletionTimestamp is RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested.\n\nPopulated by the system when a graceful deletion is requested. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#metadata",
          "$ref": "#/definitions/v1.Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "API version of the referent.",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container that triggered the event) or if no container name is specified \"spec.containers[2]\" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids",
          "type": "string"
        }
      }
    },
    "v1.RelatedObject": {
      "description": "The object for which the event is related",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string",
          "enum": [
            "spectrocluster",
            "machine",
            "cloudconfig",
            "clusterprofile",
            "pack"
          ]
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1.ResourceReference": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "kind": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1DeleteMeta": {
      "description": "Properties to send back after deletion operation",
      "properties": {
        "count": {
          "type": "integer",
          "format": "int64"
        },
        "items": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "v1ObjectMeta": {
      "description": "ObjectMeta is metadata that all persisted resources must have, which includes all objects users must create.",
      "type": "object",
      "properties": {
        "annotations": {
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. More info: http://kubernetes.io/docs/user-guide/annotations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "creationTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "labels": {
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services. More info: http://kubernetes.io/docs/user-guide/labels",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/identifiers#names",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the \"default\" namespace, but \"default\" is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty.\n\nMust be a DNS_LABEL. Cannot be updated. More info: http://kubernetes.io/docs/user-guide/namespaces",
          "type": "string"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources.\n\nPopulated by the system. Read-only. Value must be treated as opaque by clients and . More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations.\n\nPopulated by the system. Read-only. More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      }
    },
    "v1Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.  Wrappers are provided for many of the factory methods that the time package offers.",
      "type": "string",
      "format": "date-time"
    },
    "v1Uid": {
      "type": "object",
      "required": [
        "uid"
      ],
      "properties": {
        "uid": {
          "type": "string"
        }
      }
    },
    "v1Uids": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1Uid"
      }
    },
    "v1alpha1.APIEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.AsyncOperationIdEntity": {
      "description": "Async operation id",
      "type": "object",
      "properties": {
        "operationId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Audit": {
      "description": "Aduit entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AuditSpec"
        }
      }
    },
    "v1alpha1.AuditActor": {
      "description": "Audit actor spec",
      "properties": {
        "actorType": {
          "type": "string",
          "enum": [
            "user",
            "system",
            "service"
          ]
        },
        "project": {
          "$ref": "#/definitions/v1alpha1.ProjectMeta"
        },
        "serviceName": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1alpha1.UserMeta"
        }
      }
    },
    "v1alpha1.AuditMsgUpdate": {
      "description": "Aduit user msg update entity",
      "type": "object",
      "properties": {
        "userMsg": {
          "type": "string",
          "maxLength": 255,
          "minLength": 3
        }
      }
    },
    "v1alpha1.AuditSpec": {
      "description": "Audit specifications",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "create",
            "update",
            "delete",
            "publish",
            "deploy"
          ]
        },
        "actor": {
          "$ref": "#/definitions/v1alpha1.AuditActor"
        },
        "contentMsg": {
          "type": "string"
        },
        "resource": {
          "$ref": "#/definitions/v1.ResourceReference"
        },
        "userMsg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AuditSysMsg": {
      "description": "Aduit system message",
      "type": "object",
      "properties": {
        "actionMsg": {
          "type": "string"
        },
        "contentMsg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Audits": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Audit"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AuthLogin": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1alpha1.AwsAMI": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "os": {
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsAccount": {
      "description": "Aws cloud account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.AwsAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AwsAvailabilityZone": {
      "description": "Aws availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "zoneId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsAvailabilityZones": {
      "description": "List of aws availability zones for a region",
      "type": "object",
      "required": [
        "zones"
      ],
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAvailabilityZone"
          }
        }
      }
    },
    "v1alpha1.AwsCloudAccount": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsCloudConfig": {
      "description": "AwsCloudConfig is the Schema for the awscloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AwsCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AwsCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AwsCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.AwsClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.AwsCloudConfigStatus": {
      "description": "AwsCloudConfigStatus defines the observed state of AwsCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsAMI"
          }
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.AwsCloudConfigSummary": {
      "description": "AWS cloud config summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "AWS cloud config spec summary",
          "type": "object",
          "properties": {
            "cloudaccount": {
              "$ref": "#/definitions/v1alpha1.CloudAccountMeta"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
            },
            "machinePoolConfig": {
              "description": "AWS template machine pool meta information",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AwsCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AwsCloudConfigsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsCloudConfigSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AwsClusterConfig": {
      "description": "cluster level configuration for aws cloud, same for all machinepools",
      "type": "object",
      "required": [
        "region"
      ],
      "properties": {
        "controlPlaneLoadBalancer": {
          "description": "ControlPlaneLoadBalancer specifies how API server elb will be configured, this field is optional, not provided, \"\", default =\u003e \"Internet-facing\" \"Internet-facing\" =\u003e \"Internet-facing\" \"internal\" =\u003e \"internal\" For spectro saas setup we require to talk to the apiserver from our cluster so ControlPlaneLoadBalancer should be \"\", not provided or \"Internet-facing\"",
          "type": "string"
        },
        "region": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "vpcId": {
          "description": "VPC Id to deploy cluster into should have one public and one private subnet for the the cluster creation, this field is optional, If VPC Id is not provided a fully managed VPC will be created",
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsFindImageRequest": {
      "description": "Aws image tags and credentials",
      "type": "object",
      "properties": {
        "amiName": {
          "type": "string"
        },
        "awsAccount": {
          "$ref": "#/definitions/v1alpha1.AwsCloudAccount"
        }
      }
    },
    "v1alpha1.AwsImage": {
      "description": "Aws image name and ami",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsInstanceType": {
      "description": "Aws instance type details",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Attributes"
        },
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Cpus"
        },
        "currentGen": {
          "description": "CurrentGen signals whether the instance type generation is the current one. Only applies for amazon",
          "type": "boolean",
          "x-go-name": "CurrentGen"
        },
        "gpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gpus"
        },
        "memPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Mem"
        },
        "ntwPerf": {
          "type": "string",
          "x-go-name": "NtwPerf"
        },
        "ntwPerfCategory": {
          "type": "string",
          "x-go-name": "NtwPerfCat"
        },
        "onDemandPrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "OnDemandPrice"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Zones"
        }
      }
    },
    "v1alpha1.AwsInstanceTypes": {
      "description": "List of Aws instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsInstanceType"
          }
        }
      }
    },
    "v1alpha1.AwsKeyPairs": {
      "description": "List of aws key pair names",
      "type": "object",
      "properties": {
        "keyNames": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.AwsMachine": {
      "description": "Aws cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AwsMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AwsMachineStatus"
        }
      }
    },
    "v1alpha1.AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsSubnetEntity"
          }
        }
      }
    },
    "v1alpha1.AwsMachinePoolConfig": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "subnetIds": {
          "description": "AZ to subnet mapping filled by ally from hubble SubnetIDs [\"us-west-2d\"] = \"subnet-079b6061\" This field is optional If we don't provide a subnetId then by default the first private subnet from the AZ will be picked up for deployment",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.AwsMachinePoolConfigMeta": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.AwsMachineSpec": {
      "description": "Aws cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "vpcId",
        "ami"
      ],
      "properties": {
        "ami": {
          "type": "string"
        },
        "az": {
          "type": "string"
        },
        "dnsName": {
          "type": "string"
        },
        "iamProfile": {
          "type": "string"
        },
        "instanceType": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsNic"
          }
        },
        "phase": {
          "type": "string"
        },
        "sshKeyName": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsMachineStatus": {
      "description": "Aws machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1alpha1.MachineHealth"
        },
        "instanceState": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.MachineStatus"
        }
      }
    },
    "v1alpha1.AwsMachines": {
      "description": "Aws machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AwsNic": {
      "description": "Aws network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsRegion": {
      "description": "Aws region",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "optInStatus": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsRegions": {
      "description": "List of aws regions",
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsRegion"
          }
        }
      }
    },
    "v1alpha1.AwsS3ParamEntity": {
      "description": "Aws S3 param entity",
      "type": "object",
      "properties": {
        "awsAccount": {
          "$ref": "#/definitions/v1alpha1.AwsCloudAccount"
        },
        "bucketName": {
          "type": "string"
        },
        "pathName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsSubnet": {
      "description": "Aws subnet",
      "type": "object",
      "properties": {
        "az": {
          "type": "string"
        },
        "isPrivate": {
          "type": "boolean"
        },
        "name": {
          "type": "string"
        },
        "subnetId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsVpc": {
      "description": "Aws Vpc",
      "type": "object",
      "required": [
        "vpcId"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsSubnet"
          }
        },
        "vpcId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AwsVpcs": {
      "description": "List of aws VPCs in a region",
      "type": "object",
      "required": [
        "vpcs"
      ],
      "properties": {
        "vpcs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AwsVpc"
          }
        }
      }
    },
    "v1alpha1.AzureAccount": {
      "description": "Azure account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.AzureAccountSpec": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string",
          "format": "password"
        },
        "tenantId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AzureAvailabilityZone": {
      "description": "Azure availability zone",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureCloudConfig": {
      "description": "AzureCloudConfig is the Schema for the azurecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AzureCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AzureCloudConfigSpec": {
      "description": "AwsCloudConfigSpec defines the cloud configuration input by user This will translate to clusterspec/machinespec for cluster-api",
      "type": "object",
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains AzureCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.AzureCloudConfigStatus": {
      "description": "AzureCloudConfigStatus defines the observed state of AzureCloudConfig The cloudimage info built by Mold is stored here image should be mapped to a specific machinepool",
      "type": "object",
      "properties": {
        "ansibleRoleDigest": {
          "description": "For mold controller to identify if is there any changes in Pack",
          "type": "string"
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "images": {
          "description": "Images array items should be 1-to-1 mapping to Spec.MachinePoolConfig",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureImage"
          }
        },
        "isAddonLayer": {
          "description": "addon layes present in spc",
          "type": "boolean"
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "useCapiImage": {
          "description": "PackerVariableDigest string `json:\"packerDigest,omitempty\"` If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.AzureCloudConfigSummary": {
      "description": "Azure cloud config summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Azure cloud config spec summary",
          "type": "object",
          "properties": {
            "cloudaccount": {
              "$ref": "#/definitions/v1alpha1.CloudAccountMeta"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
            },
            "machinePoolConfig": {
              "description": "Azure template machine pool meta information",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AzureCloudConfigStatus"
        }
      }
    },
    "v1alpha1.AzureCloudConfigsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureCloudConfigSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AzureClusterConfig": {
      "description": "cluster level configuration for azure cloud, same for all machinepools",
      "type": "object",
      "required": [
        "subscriptionId",
        "location",
        "sshKey"
      ],
      "properties": {
        "controlPlaneSubnet": {
          "description": "Subnet for Kubernetes control-plane node",
          "$ref": "#/definitions/v1alpha1.AzureSubnet"
        },
        "location": {
          "description": "Location is the Azure datacenter location",
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sshKey": {
          "type": "string"
        },
        "subscriptionId": {
          "description": "Subscription ID is unique identifier for the subscription used to access Azure services",
          "type": "string"
        },
        "vnetName": {
          "description": "VNETName is the virtual network in which the cluster is to be provisioned.",
          "type": "string"
        },
        "workerSubnet": {
          "description": "Subnet for Kubernetes worker node",
          "$ref": "#/definitions/v1alpha1.AzureSubnet"
        }
      }
    },
    "v1alpha1.AzureImage": {
      "description": "Refers to Azure Shared Gallery image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionID": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureInstanceType": {
      "description": "Azure instance type details",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Attributes"
        },
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Cpus"
        },
        "currentGen": {
          "description": "CurrentGen signals whether the instance type generation is the current one.",
          "type": "boolean",
          "x-go-name": "CurrentGen"
        },
        "gpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gpus"
        },
        "memPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Mem"
        },
        "ntwPerf": {
          "type": "string",
          "x-go-name": "NtwPerf"
        },
        "ntwPerfCategory": {
          "type": "string",
          "x-go-name": "NtwPerfCat"
        },
        "onDemandPrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "OnDemandPrice"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Zones"
        }
      }
    },
    "v1alpha1.AzureInstanceTypes": {
      "description": "List of Azure instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureInstanceType"
          }
        }
      }
    },
    "v1alpha1.AzureMachine": {
      "description": "Azure cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.AzureMachineStatus"
        }
      }
    },
    "v1alpha1.AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        }
      }
    },
    "v1alpha1.AzureMachinePoolConfig": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.AzureMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.AzureMachineSpec": {
      "description": "Azure cloud VM definition spec",
      "type": "object",
      "required": [
        "instanceType",
        "location",
        "osDisk"
      ],
      "properties": {
        "additionalTags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "allocatePublicIP": {
          "type": "boolean"
        },
        "availabilityZone": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpecAvailabilityZone"
        },
        "image": {
          "$ref": "#/definitions/v1alpha1.AzureMachineSpecImage"
        },
        "instanceType": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureNic"
          }
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1.AzureOSDisk"
        },
        "sshPublicKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachineSpecAvailabilityZone": {
      "description": "Azure Machine Spec Availability zone",
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachineSpecImage": {
      "description": "Azure Machine Spec Image",
      "type": "object",
      "properties": {
        "gallery": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "offer": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "resourceGroup": {
          "type": "string"
        },
        "sku": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureMachineStatus": {
      "description": "Azure machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1alpha1.MachineHealth"
        },
        "instanceState": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.MachineStatus"
        }
      }
    },
    "v1alpha1.AzureMachines": {
      "description": "Azure machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.AzureNic": {
      "description": "Aws network interface",
      "type": "object",
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "publicIp": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1alpha1.ManagedDisk"
        },
        "osType": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureRegion": {
      "description": "Azure region",
      "type": "object",
      "properties": {
        "displayName": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureAvailabilityZone"
          }
        }
      }
    },
    "v1alpha1.AzureRegions": {
      "description": "List of azure regions",
      "type": "object",
      "required": [
        "regions"
      ],
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureRegion"
          }
        }
      }
    },
    "v1alpha1.AzureResourceGroupList": {
      "description": "List of Azure resource group list",
      "type": "object",
      "properties": {
        "resourceGroupList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ResourceGroup"
          }
        }
      }
    },
    "v1alpha1.AzureStorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "storageAccountTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.StorageAccountEntity"
          }
        }
      }
    },
    "v1alpha1.AzureSubnet": {
      "type": "object",
      "properties": {
        "cidrBlock": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "securityGroupName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureSubscriptionList": {
      "description": "List of Azure subscription list",
      "type": "object",
      "properties": {
        "subscriptionList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Subscription"
          }
        }
      }
    },
    "v1alpha1.AzureVhdUrlEntity": {
      "description": "Azure vhd url entity",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "v1alpha1.AzureVirtualNetworkList": {
      "description": "List of Azure virtual network list",
      "type": "object",
      "properties": {
        "virtualNetworkList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VirtualNetwork"
          }
        }
      }
    },
    "v1alpha1.AzureZoneEntity": {
      "description": "Azure vhd url entity",
      "type": "object",
      "properties": {
        "zoneList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ZoneEntity"
          }
        }
      }
    },
    "v1alpha1.BareMetalConfig": {
      "description": "BareMetalConfig is the Schema for the baremetalconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.BareMetalConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.BareMetalConfigStatus"
        }
      }
    },
    "v1alpha1.BareMetalConfigSpec": {
      "description": "BareMetalConfigSpec defines the desired state of BareMetalConfig",
      "type": "object",
      "properties": {
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.BareMetalConfigStatus": {
      "description": "BareMetalConfigStatus defines the observed state of BareMetalConfig",
      "type": "object"
    },
    "v1alpha1.BareMetalConfigSummary": {
      "description": "BareMetal config summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "BareMetal config summary",
          "type": "object",
          "properties": {
            "infraProfileTemplate": {
              "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
            },
            "labels": {
              "description": "labels for this pool, example: master/worker, gpu, windows",
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "machines": {
              "description": "Bare Metal machine meta inforation",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.BareMetalMachineMeta"
              }
            },
            "size": {
              "description": "size of the pool, number of machines",
              "type": "integer",
              "format": "int32"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.BareMetalConfigStatus"
        }
      }
    },
    "v1alpha1.BareMetalConfigsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalConfigSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.BareMetalMachine": {
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineStatus"
        }
      }
    },
    "v1alpha1.BareMetalMachineConfigEntity": {
      "description": "BareMetal machine pool configuration API entity",
      "type": "object",
      "required": [
        "machineUids"
      ],
      "properties": {
        "machineUids": {
          "description": "Bare Metal machine UIDs",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.BareMetalMachineMeta": {
      "description": "BareMetal machine meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.BareMetalMachinePoolConfig": {
      "type": "object",
      "properties": {
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "machines": {
          "description": "actual machines",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalMachine"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.BareMetalMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "poolConfig",
        "machineConfig",
        "profileConfig"
      ],
      "properties": {
        "machineConfig": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.BareMetalMachineSpec": {
      "description": "BareMetalMachineSpec defines the desired state of BareMetalMachine",
      "type": "object",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1alpha1.CPU"
        },
        "disks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Disk"
          }
        },
        "gpu": {
          "$ref": "#/definitions/v1alpha1.GPU"
        },
        "memory": {
          "$ref": "#/definitions/v1alpha1.Memory"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Nic"
          }
        },
        "os": {
          "$ref": "#/definitions/v1alpha1.OS"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.BareMetalMachineStatus": {
      "description": "BareMetalMachineStatus defines the observed state of BareMetalMachine",
      "type": "object"
    },
    "v1alpha1.BareMetalMachineSummary": {
      "description": "BareMetal machine summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "BareMetal machine spec summary",
          "type": "object",
          "properties": {
            "cpu": {
              "$ref": "#/definitions/v1alpha1.CPU"
            },
            "memory": {
              "$ref": "#/definitions/v1alpha1.Memory"
            },
            "os": {
              "$ref": "#/definitions/v1alpha1.OS"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.BareMetalMachineStatus"
        }
      }
    },
    "v1alpha1.BareMetalMachines": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.BareMetalMachinesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.BareMetalMachineSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.BulkEvents": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.Event"
      }
    },
    "v1alpha1.CPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of cpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.CloudAccountMeta": {
      "description": "Cloud account meta information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CloudAccountStatus": {
      "description": "Status of the account",
      "type": "object",
      "properties": {
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.CloudAccountSummary": {
      "description": "Cloud account summary",
      "type": "object",
      "properties": {
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Cloud account spec summary",
          "type": "object",
          "properties": {
            "accountId": {
              "type": "string"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.CloudAccountsPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.CloudAccountsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudAccountSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.CloudConfigMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "machinePools": {
          "description": "Machine pool meta information",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MachinePoolMeta"
          }
        }
      }
    },
    "v1alpha1.CloudType": {
      "type": "string",
      "default": "all",
      "enum": [
        "all",
        "aws",
        "azure",
        "gcp",
        "vsphere",
        "baremetal"
      ]
    },
    "v1alpha1.ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ClusterProfile": {
      "description": "ClusterProfile is the Schema for the clusterprofiles API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileStatus"
        }
      }
    },
    "v1alpha1.ClusterProfileEntity": {
      "description": "Cluster profile input for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "template": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateDraft"
            }
          }
        }
      }
    },
    "v1alpha1.ClusterProfilePackValues": {
      "$ref": "#/definitions/v1alpha1.PackValues"
    },
    "v1alpha1.ClusterProfilePackValuesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValues"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ClusterProfilePacksEntities": {
      "description": "List of cluster profile packs entities",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfilePacksEntity"
          }
        }
      }
    },
    "v1alpha1.ClusterProfilePacksEntity": {
      "description": "Cluster profile's packs information",
      "type": "object",
      "properties": {
        "addonType": {
          "type": "string"
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudType"
          }
        },
        "layer": {
          "$ref": "#/definitions/v1alpha1.PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "registryUid": {
          "type": "string"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackSummaryStatus"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ClusterProfilePatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.ClusterProfileSpec": {
      "description": "ClusterProfileTemplate can be in draft mode, or published mode User only see the latest published template, and (or) the draft template User can apply either the draft version or the latest published version to a cluster when user create a draft version, just copy the Published template, increment the version, and keep changing the draft template without increment the draft version when user publish a draft, the version is fixed, and won't be able to make any modification on published template For each clusterprofile that has a published version, there will be a ClusterProfileArchive automatically created when user publish a draft, the published version will also be copied over to the corresponding ClusterProfileArchive it is just in case in the future for whatever reason we may want to expose earlier versions",
      "type": "object",
      "properties": {
        "draft": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "published": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        }
      }
    },
    "v1alpha1.ClusterProfileStatus": {
      "description": "ClusterProfileStatus defines the observed state of ClusterProfile",
      "type": "object",
      "properties": {
        "isPublished": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.ClusterProfileSummary": {
      "description": "Cluster profile summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Cluster profile spec summary",
          "type": "object",
          "properties": {
            "draft": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateSummary"
            },
            "published": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateSummary"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ClusterProfileStatus"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplate": {
      "description": "ClusterProfileTemplate contains details of a clusterprofile definition",
      "type": "object",
      "properties": {
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "packServerRefs": {
          "description": "PackServerRefs is only used on Hubble side it is reference to pack registry servers which PackRef belongs to in hubble, pack server is a top level object, so use a reference to point to it packs within a clusterprofile can come from different pack servers, so this is an array",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1.ObjectReference"
          }
        },
        "packServerSecret": {
          "description": "This secret is used only on Palette side use case is similar  to k8s image pull secret this single secret internally should contains all the pack servers in PackServerRefs if empty, means no credential is needed to access the pack server For spectro saas, Ally will set this field before pass to palette",
          "type": "string"
        },
        "packs": {
          "description": "Packs definitions here are final definitions. If ClonedFrom and ParamsOverwrite is present, then Packs are the final merge result of ClonedFrom and ParamsOverwrite So orchestration engine will just take the Packs and do the work, no need to worry about parameters merge",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "version": {
          "description": "version start from 0, matching the index of ClusterProfileSpec.Versions[] will be used by clusterSpec to identify which version is applied to the cluster",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateDraft": {
      "description": "Cluster profile template",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "packs": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackEntity"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "cluster",
            "infra"
          ]
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateMeta": {
      "description": "Cluster profile template meta information",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "name": {
          "type": "string"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRef"
          }
        },
        "type": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfileTemplateSummary": {
      "description": "Cluster profile template summary",
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "packs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRef"
          }
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.ClusterProfiles": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfile"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ClusterProfilesSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterProfileSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ComputeMetrics": {
      "description": "Compute metrics",
      "type": "object",
      "properties": {
        "lastUpdatedTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "limit": {
          "type": "number",
          "x-omitempty": false
        },
        "request": {
          "type": "number",
          "x-omitempty": false
        },
        "total": {
          "type": "number",
          "x-omitempty": false
        },
        "unit": {
          "type": "string"
        },
        "usage": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.CrypticResponse": {
      "description": "Cryptic Response",
      "type": "object",
      "properties": {
        "encryptedText": {
          "type": "string"
        },
        "key": {
          "type": "string"
        },
        "plainText": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Disk": {
      "type": "object",
      "properties": {
        "controller": {
          "type": "string"
        },
        "partitions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.Partition"
          }
        },
        "size": {
          "description": "Size in GB",
          "type": "integer",
          "format": "int32"
        },
        "vendor": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ErrLog": {
      "type": "object",
      "properties": {
        "err": {
          "$ref": "#/definitions/v1alpha1.ErrStack"
        },
        "ref": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ErrLogs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.ErrLog"
      }
    },
    "v1alpha1.ErrStack": {
      "type": "object",
      "properties": {
        "causes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ErrStack"
          }
        },
        "code": {
          "type": "string"
        },
        "data": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "object"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Event": {
      "description": "Event information organized by tags",
      "type": "object",
      "properties": {
        "involvedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "message": {
          "type": "string"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "reason": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "severity": {
          "type": "string"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.EventSource"
        }
      }
    },
    "v1alpha1.EventSource": {
      "description": "Event source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "host": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Events": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Event"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GPU": {
      "type": "object",
      "properties": {
        "cores": {
          "description": "number of gpu cores",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.GcpAccount": {
      "description": "Gcp account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GcpAccountSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.GcpAccountSpec": {
      "type": "object",
      "required": [
        "jsonCredentials"
      ],
      "properties": {
        "jsonCredentials": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GcpCloudAccount": {
      "description": "Gcp cloud account",
      "type": "object",
      "properties": {
        "jsonCredentials": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpInstanceType": {
      "description": "Gcp instance type details",
      "type": "object",
      "properties": {
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-go-name": "Attributes"
        },
        "category": {
          "type": "string",
          "x-go-name": "Category"
        },
        "cpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Cpus"
        },
        "currentGen": {
          "description": "CurrentGen signals whether the instance type generation is the current one. Only applies for amazon",
          "type": "boolean",
          "x-go-name": "CurrentGen"
        },
        "gpusPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Gpus"
        },
        "memPerVm": {
          "type": "number",
          "format": "double",
          "x-go-name": "Mem"
        },
        "ntwPerf": {
          "type": "string",
          "x-go-name": "NtwPerf"
        },
        "ntwPerfCategory": {
          "type": "string",
          "x-go-name": "NtwPerfCat"
        },
        "onDemandPrice": {
          "type": "number",
          "format": "double",
          "x-go-name": "OnDemandPrice"
        },
        "type": {
          "type": "string",
          "x-go-name": "Type"
        },
        "zones": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "x-go-name": "Zones"
        }
      }
    },
    "v1alpha1.GcpInstanceTypes": {
      "description": "List of Gcp instance types",
      "type": "object",
      "properties": {
        "instanceTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpInstanceType"
          }
        }
      }
    },
    "v1alpha1.GcpNetwork": {
      "description": "GcpNetwork",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpSubnet"
          }
        }
      }
    },
    "v1alpha1.GcpNetworks": {
      "description": "List of Gcp networks",
      "type": "object",
      "properties": {
        "networks": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpNetwork"
          }
        }
      }
    },
    "v1alpha1.GcpProject": {
      "description": "Gcp project",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpProjects": {
      "description": "List of projects for an account",
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpProject"
          }
        }
      }
    },
    "v1alpha1.GcpRegion": {
      "description": "Gcp region",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpRegions": {
      "description": "List of gcp regions",
      "type": "object",
      "properties": {
        "regions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpRegion"
          }
        }
      }
    },
    "v1alpha1.GcpSubnet": {
      "description": "Gcp subnet",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpZone": {
      "description": "Gcp region",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GcpZones": {
      "description": "List of gcp zones",
      "type": "object",
      "properties": {
        "zones": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.GcpZone"
          }
        }
      }
    },
    "v1alpha1.GitCommit": {
      "description": "Git Commit Spec",
      "type": "object",
      "required": [
        "sha"
      ],
      "properties": {
        "label": {
          "type": "string"
        },
        "ref": {
          "type": "string"
        },
        "repo": {
          "$ref": "#/definitions/v1alpha1.GitRepository"
        },
        "sha": {
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        }
      }
    },
    "v1alpha1.GitOrganization": {
      "description": "Git Event Organization Spec",
      "type": "object",
      "required": [
        "id",
        "login"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "login": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GitPrEvent": {
      "description": "Git Pull Request Event information",
      "type": "object",
      "required": [
        "action",
        "number",
        "repository",
        "pull_request"
      ],
      "properties": {
        "action": {
          "type": "string"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "organization": {
          "$ref": "#/definitions/v1alpha1.GitOrganization"
        },
        "pull_request": {
          "$ref": "#/definitions/v1alpha1.GitPullRequest"
        },
        "repository": {
          "$ref": "#/definitions/v1alpha1.GitRepository"
        },
        "sender": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        }
      }
    },
    "v1alpha1.GitPullRequest": {
      "description": "Git Pull Request Spec",
      "type": "object",
      "required": [
        "id",
        "number",
        "state"
      ],
      "properties": {
        "base": {
          "$ref": "#/definitions/v1alpha1.GitCommit"
        },
        "changed_files": {
          "type": "integer"
        },
        "closed_at": {
          "type": "string",
          "format": "date-time"
        },
        "created_at": {
          "type": "string",
          "format": "date-time"
        },
        "head": {
          "$ref": "#/definitions/v1alpha1.GitCommit"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "merge_commit_sha": {
          "type": "string"
        },
        "merged_at": {
          "type": "string",
          "format": "date-time"
        },
        "merged_by": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        },
        "number": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "state": {
          "type": "string"
        },
        "updated_at": {
          "type": "string",
          "format": "date-time"
        },
        "user": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        }
      }
    },
    "v1alpha1.GitPushEvent": {
      "description": "Git Push Event information",
      "type": "object",
      "properties": {
        "organization": {
          "$ref": "#/definitions/v1alpha1.GitOrganization"
        },
        "pusher": {
          "$ref": "#/definitions/v1alpha1.GitPusher"
        },
        "repository": {
          "$ref": "#/definitions/v1alpha1.GitRepository"
        },
        "sender": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        }
      }
    },
    "v1alpha1.GitPusher": {
      "description": "Git Pusher spec",
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GitRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GitRegistriesSummary": {
      "description": "Git Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.GitRegistry": {
      "description": "Git registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.GitRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.RegistryStatus"
        }
      }
    },
    "v1alpha1.GitRegistrySpec": {
      "description": "Git registry credentials spec",
      "type": "object",
      "required": [
        "auth",
        "repository"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1alpha1.RegistryAuth"
        },
        "organization": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "webhookId": {
          "type": "integer"
        }
      }
    },
    "v1alpha1.GitRegistrySummary": {
      "description": "Git Registry summary",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "repository": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GitRepoFileContent": {
      "type": "object",
      "properties": {
        "content": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "repoName": {
          "type": "string"
        },
        "sha": {
          "type": "string"
        }
      }
    },
    "v1alpha1.GitRepository": {
      "description": "Git Repository Spec",
      "type": "object",
      "required": [
        "id",
        "name",
        "full_name",
        "owner"
      ],
      "properties": {
        "full_name": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "name": {
          "type": "string"
        },
        "owner": {
          "$ref": "#/definitions/v1alpha1.GitUser"
        },
        "private": {
          "type": "boolean"
        }
      }
    },
    "v1alpha1.GitUser": {
      "description": "Git User Spec",
      "type": "object",
      "required": [
        "id",
        "login",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64",
          "minimum": 1
        },
        "login": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Hash": {
      "type": "object",
      "required": [
        "hash"
      ],
      "properties": {
        "hash": {
          "type": "string"
        }
      }
    },
    "v1alpha1.IdentityProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.IdentityProviders": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.IdentityProvider"
      }
    },
    "v1alpha1.LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ServicePort"
          }
        }
      }
    },
    "v1alpha1.Login": {
      "description": "Login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.LoginResponse": {
      "description": "Login response specifying auth type and org name",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string",
          "enum": [
            "password",
            "sso"
          ]
        },
        "orgName": {
          "type": "string"
        },
        "redirectUrl": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MachineHealth": {
      "description": "Machine health state",
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.MachineHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MachineHealthCondition": {
      "description": "Machine health condition",
      "type": "object",
      "properties": {
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MachinePoolConfigEntity": {
      "description": "BareMetal machine pool configuration API entity",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MachinePoolMeta": {
      "type": "object",
      "properties": {
        "cloudType": {
          "$ref": "#/definitions/v1alpha1.CloudType"
        },
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.MachinePoolProfileConfigEntity": {
      "type": "object",
      "required": [
        "infraProfileUid"
      ],
      "properties": {
        "infraProfileUid": {
          "description": "InfraClusterProfile uid for the machine pool",
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValuesEntity"
          }
        }
      }
    },
    "v1alpha1.MachineStatus": {
      "description": "MachineStatus",
      "type": "object",
      "properties": {
        "lastHeartbeatTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ManagedDisk": {
      "type": "object",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Memory": {
      "type": "object",
      "properties": {
        "size": {
          "description": "memory size in bytes",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.MetricAggregation": {
      "description": "Aggregation values",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number",
          "x-omitempty": false
        },
        "count": {
          "type": "number",
          "format": "int64",
          "x-omitempty": false
        },
        "max": {
          "type": "number",
          "x-omitempty": false
        },
        "min": {
          "type": "number",
          "x-omitempty": false
        },
        "sum": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MetricMetadata": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MetricPoint": {
      "description": "Metric Info",
      "type": "object",
      "properties": {
        "avg": {
          "type": "number"
        },
        "count": {
          "type": "number",
          "format": "int64"
        },
        "max": {
          "type": "number"
        },
        "min": {
          "type": "number"
        },
        "sum": {
          "type": "number"
        },
        "timestamp": {
          "type": "number",
          "format": "int64"
        },
        "value": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.MetricTimeSeries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Metrics"
          }
        }
      }
    },
    "v1alpha1.MetricTimeSeriesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.MetricsList"
          }
        }
      }
    },
    "v1alpha1.Metrics": {
      "type": "object",
      "properties": {
        "aggregation": {
          "$ref": "#/definitions/v1alpha1.MetricAggregation"
        },
        "kind": {
          "type": "string"
        },
        "points": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.MetricPoint"
          }
        },
        "unit": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MetricsList": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1alpha1.MetricMetadata"
        },
        "metrics": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Metrics"
          }
        }
      }
    },
    "v1alpha1.MsgBrokerConnection": {
      "type": "object",
      "properties": {
        "account": {
          "type": "string"
        },
        "accountUid": {
          "type": "string"
        },
        "cid": {
          "type": "integer"
        },
        "duplicationCount": {
          "type": "integer"
        },
        "iP": {
          "type": "string"
        },
        "idle": {
          "type": "string"
        },
        "inBytes": {
          "type": "integer"
        },
        "inMsgs": {
          "type": "integer"
        },
        "lang": {
          "type": "string"
        },
        "lastActivity": {
          "$ref": "#/definitions/v1.Time"
        },
        "name": {
          "type": "string"
        },
        "outBytes": {
          "type": "integer"
        },
        "outMsgs": {
          "type": "integer"
        },
        "pendingBytes": {
          "type": "integer"
        },
        "port": {
          "type": "integer"
        },
        "rtt": {
          "type": "string"
        },
        "start": {
          "$ref": "#/definitions/v1.Time"
        },
        "subscriptionList": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "subscriptions": {
          "type": "integer"
        },
        "tLSCipherSuite": {
          "type": "string"
        },
        "tLSVersion": {
          "type": "string"
        },
        "uptime": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.MsgBrokerConnections": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.MsgBrokerConnection"
      }
    },
    "v1alpha1.MsgBrokerHealth": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "connections": {
              "type": "object",
              "properties": {
                "connections": {
                  "type": "array",
                  "items": {
                    "$ref": "#/definitions/v1alpha1.MsgBrokerConnection"
                  }
                },
                "numConnections": {
                  "type": "integer"
                },
                "totalConnections": {
                  "type": "integer"
                }
              }
            }
          }
        }
      }
    },
    "v1alpha1.NatsConfiguration": {
      "description": "Nats Configuration",
      "type": "object",
      "properties": {
        "insecureTls": {
          "type": "boolean"
        },
        "password": {
          "type": "string"
        },
        "tlsCertificate": {
          "type": "string"
        },
        "tlsKey": {
          "type": "string"
        },
        "urls": {
          "type": "string"
        },
        "userName": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NatsCredentialRequest": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "clusterUid": {
          "type": "string"
        },
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet"
          ]
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NatsCredentials": {
      "description": "Array of permissions",
      "type": "object",
      "properties": {
        "allowedPublisher": {
          "type": "string"
        },
        "allowedSubcriber": {
          "type": "string"
        },
        "jwt": {
          "type": "string"
        },
        "seed": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Nic": {
      "type": "object",
      "properties": {
        "dns": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "gateway": {
          "type": "string"
        },
        "ip": {
          "type": "string"
        },
        "macAddr": {
          "type": "string"
        },
        "subnet": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Notification": {
      "description": "Event notification and action definition",
      "type": "object",
      "properties": {
        "action": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.NotificationAction"
        },
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "source": {
          "type": "object",
          "$ref": "#/definitions/v1alpha1.NotificationSource"
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackUpdate",
            "NotificationPackRegistryUpdate",
            "NotificationNone"
          ]
        }
      }
    },
    "v1alpha1.NotificationAction": {
      "description": "Notification action definition",
      "type": "object",
      "properties": {
        "ack": {
          "description": "Is the notification read by the consumer",
          "type": "boolean",
          "x-omitempty": false
        },
        "actionMessage": {
          "type": "string"
        },
        "actionType": {
          "type": "string",
          "enum": [
            "NotifyActionPacksUpdate",
            "NotifyActionClusterProfileUpdate",
            "NotifyActionPackRegistryUpdate",
            "NotifyActionClusterUpdate",
            "NotifyActionNone"
          ]
        },
        "events": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "isDone": {
          "description": "Is the notification action completed",
          "type": "boolean",
          "x-omitempty": false
        },
        "isInfo": {
          "description": "Is info notification",
          "type": "boolean",
          "x-omitempty": false
        },
        "link": {
          "type": "string"
        }
      }
    },
    "v1alpha1.NotificationEvent": {
      "description": "Notification event",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        },
        "digest": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "meta": {
          "description": "Event messages with meta digest as the key",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "NotificationPackSync",
            "NotificationClusterProfileSync"
          ]
        }
      }
    },
    "v1alpha1.NotificationSource": {
      "description": "Notification source info",
      "type": "object",
      "properties": {
        "component": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Notifications": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Notification"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.OS": {
      "type": "object",
      "properties": {
        "family": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadSpec": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "cloudAccountUid": {
          "type": "string",
          "x-omitempty": false
        },
        "ipAddress": {
          "type": "string"
        },
        "registryUid": {
          "type": "string",
          "x-omitempty": false
        },
        "spectroClusterUid": {
          "type": "string",
          "x-omitempty": false
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadSpecEntity": {
      "description": "Overload spec",
      "type": "object",
      "properties": {
        "agentVersion": {
          "type": "string"
        },
        "hostname": {
          "type": "string"
        },
        "ipAddress": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadStatus": {
      "description": "Overload status",
      "type": "object",
      "properties": {
        "isActive": {
          "type": "boolean",
          "x-omitempty": false
        },
        "isReady": {
          "type": "boolean",
          "x-omitempty": false
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverloadVsphereOva": {
      "description": "Overload ova details",
      "type": "object",
      "properties": {
        "location": {
          "type": "string",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.Overlord": {
      "description": "Overlord defintiion",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.OverloadSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.OverloadStatus"
        }
      }
    },
    "v1alpha1.OverlordEntity": {
      "description": "Overlord spec",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.OverloadSpecEntity"
        }
      }
    },
    "v1alpha1.OverlordManifest": {
      "description": "overlord manifest",
      "type": "object",
      "properties": {
        "manifest": {
          "type": "string"
        }
      }
    },
    "v1alpha1.OverlordVsphereAccountCreate": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "name": {
          "type": "string"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.OverlordVsphereAccountEntity": {
      "properties": {
        "account": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "shareWithProjects": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.OverlordVsphereCloudConfig": {
      "properties": {
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereClusterConfig"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.Overlords": {
      "description": "Array of Overlords",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Overlord"
          }
        }
      }
    },
    "v1alpha1.PackEntity": {
      "description": "Pack entity with values to overwrite",
      "type": "object",
      "required": [
        "uid",
        "tag",
        "name"
      ],
      "properties": {
        "name": {
          "description": "Pack name",
          "type": "string"
        },
        "tag": {
          "description": "Pack tag",
          "type": "string"
        },
        "uid": {
          "description": "Pack uid",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackLayer": {
      "type": "string",
      "enum": [
        "kernel",
        "os",
        "k8s",
        "cni",
        "csi",
        "addon"
      ]
    },
    "v1alpha1.PackRef": {
      "description": "PackRef server/name:tag to point to a pack PackRef is used when construct a ClusterProfile PackSpec is used for UI to render the parameters form ClusterProfile will not know inner details of a pack ClusterProfile only contain pack name:tag, and the param values user entered for it",
      "type": "object",
      "required": [
        "layer",
        "name"
      ],
      "properties": {
        "annotations": {
          "description": "Annotations is used to allow packref to add more arbitrary information one example is to add git reference for values.yaml",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "digest": {
          "description": "digest is used to specify the version should be installed by palette when pack upgrade available, change this digest to trigger upgrade",
          "type": "string"
        },
        "layer": {
          "type": "string",
          "enum": [
            "kernel",
            "os",
            "k8s",
            "cni",
            "csi",
            "addon"
          ]
        },
        "name": {
          "description": "pack name",
          "type": "string"
        },
        "packUid": {
          "description": "PackUID is Hubble packUID, not palette Pack.UID It is used by Hubble only.",
          "type": "string"
        },
        "params": {
          "description": "params passed as env variables to be consumed at installation time",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "server": {
          "description": "pack registry server",
          "type": "string"
        },
        "tag": {
          "description": "pack tag",
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters either Params OR Values should be used, not both If both applied at the same time, will only use Values",
          "type": "string"
        },
        "version": {
          "description": "pack version",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackRegistries": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRegistry"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackRegistriesSummary": {
      "description": "Pack Registries Summary",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackRegistrySummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackRegistry": {
      "description": "Pack registry information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackRegistrySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackRegistryStatus"
        }
      }
    },
    "v1alpha1.PackRegistrySpec": {
      "description": "Pack registry credentials spec",
      "type": "object",
      "required": [
        "endpoint",
        "auth"
      ],
      "properties": {
        "auth": {
          "$ref": "#/definitions/v1alpha1.RegistryAuth"
        },
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackRegistryStatus": {
      "description": "Status of the pack registry",
      "type": "object",
      "properties": {
        "packSyncStatus": {
          "$ref": "#/definitions/v1alpha1.PackSyncStatus"
        }
      }
    },
    "v1alpha1.PackRegistrySummary": {
      "description": "Pack Registry summary",
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "private": {
          "type": "boolean",
          "x-omitempty": false
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackSummaries": {
      "description": "List of pack summary information",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.PackSummary": {
      "description": "Pack summary of a pack",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackSummarySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackSummaryStatus"
        }
      }
    },
    "v1alpha1.PackSummarySpec": {
      "description": "Specs of a pack summary",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "annotations": {
          "description": "Annotations is used to allow pack to add more arbitrary configurations",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudType"
          }
        },
        "digest": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "eol": {
          "description": "end of life for this pack, date format: yyyy-MM-dd",
          "type": "string"
        },
        "group": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1alpha1.PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "registryUid": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackSummaryStatus": {
      "description": "Pack summary status",
      "type": "object"
    },
    "v1alpha1.PackSyncStatus": {
      "description": "Status of the pack sync",
      "type": "object",
      "properties": {
        "lastSyncedTime": {
          "$ref": "#/definitions/v1.Time"
        },
        "message": {
          "type": "string"
        },
        "succeeded": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PackTagEntity": {
      "description": "Pack information organized by tags",
      "type": "object",
      "properties": {
        "addonType": {
          "description": "If Layer is Addon, then can specify additional addonType=logging/monitoring/security etc",
          "type": "string"
        },
        "cloudTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.CloudType"
          }
        },
        "displayName": {
          "type": "string"
        },
        "layer": {
          "$ref": "#/definitions/v1alpha1.PackLayer"
        },
        "logoUrl": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackUidValues"
          }
        },
        "registryUid": {
          "type": "string"
        },
        "tags": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.PackTags"
          }
        }
      }
    },
    "v1alpha1.PackTags": {
      "type": "object",
      "properties": {
        "group": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "parentTags": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "tag": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackUidValues": {
      "type": "object",
      "properties": {
        "packUid": {
          "type": "string"
        },
        "values": {
          "description": "values represents the values.yaml used as input parameters",
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValues": {
      "description": "Pack values information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PackValuesSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.PackValuesStatus"
        }
      }
    },
    "v1alpha1.PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values overrride",
      "type": "object",
      "required": [
        "tag",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValuesSpec": {
      "type": "object",
      "properties": {
        "associatedObject": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "packUid": {
          "type": "string"
        },
        "scope": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.PackValuesStatus": {
      "description": "Pack values resolution status",
      "type": "object",
      "properties": {
        "isResolved": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PairingCode": {
      "description": "Pairing code response",
      "type": "object",
      "properties": {
        "pairingCode": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Partition": {
      "type": "object",
      "properties": {
        "fileSystemType": {
          "type": "string"
        },
        "freeSpace": {
          "type": "integer",
          "format": "int32"
        },
        "mountPoint": {
          "type": "string"
        },
        "totalSpace": {
          "type": "integer",
          "format": "int32"
        },
        "usedSpace": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.Permission": {
      "description": "Permission information",
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "permissions": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1alpha1.Scope"
        }
      }
    },
    "v1alpha1.Permissions": {
      "description": "Array of permissions",
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1alpha1.Permission"
      }
    },
    "v1alpha1.Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.PlanSpec"
        }
      }
    },
    "v1alpha1.PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        },
        "price": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.PlanSpec": {
      "description": "Plan specifications",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1alpha1.PlanCost"
        },
        "expiry": {
          "description": "plan expiry time",
          "$ref": "#/definitions/v1.Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1.PlanLimit"
        }
      }
    },
    "v1alpha1.Plans": {
      "description": "Array of Plans",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Plan"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.Project": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ProjectSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ProjectStatus"
        }
      }
    },
    "v1alpha1.ProjectEntity": {
      "description": "Project information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ProjectEntitySpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ProjectStatus"
        }
      }
    },
    "v1alpha1.ProjectEntitySpec": {
      "description": "Project specifications",
      "properties": {
        "logoUid": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserRoleMap"
          }
        }
      }
    },
    "v1alpha1.ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ProjectPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidRoleSummary"
          }
        }
      }
    },
    "v1alpha1.ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1alpha1.ProjectSpec": {
      "description": "Project specifications",
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamRoleMap"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserRoleMap"
          }
        }
      }
    },
    "v1alpha1.ProjectSpecSummary": {
      "type": "object",
      "properties": {
        "logoUrl": {
          "type": "string"
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.ProjectStatus": {
      "description": "Project status",
      "type": "object"
    },
    "v1alpha1.ProjectSummary": {
      "description": "Project summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ProjectSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.ProjectStatus"
        }
      }
    },
    "v1alpha1.Projects": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Project"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.ProjectsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.ProjectSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.RegistriesPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.RegistryAuth": {
      "description": "Auth credentials of the registry",
      "type": "object",
      "properties": {
        "password": {
          "type": "string",
          "format": "password"
        },
        "token": {
          "type": "string",
          "format": "password"
        },
        "type": {
          "type": "string",
          "enum": [
            "basic",
            "token"
          ]
        },
        "username": {
          "type": "string"
        }
      }
    },
    "v1alpha1.RegistryStatus": {
      "description": "Status of the registry",
      "type": "object",
      "properties": {
        "state": {
          "type": "string",
          "enum": [
            "active",
            "inactive"
          ]
        }
      }
    },
    "v1alpha1.ResourceGroup": {
      "description": "Azure resource Group",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Role": {
      "description": "Role",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.RoleSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.RoleStatus"
        }
      }
    },
    "v1alpha1.RolePatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.RoleSpec": {
      "description": "Role specifications",
      "properties": {
        "permissions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "scope": {
          "$ref": "#/definitions/v1alpha1.Scope"
        }
      }
    },
    "v1alpha1.RoleStatus": {
      "description": "Role status",
      "properties": {
        "isEnabled": {
          "description": "Specifies if role account is enabled/disabled",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.Roles": {
      "description": "Array of Roles",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Role"
          }
        }
      }
    },
    "v1alpha1.S3FileUrlEntity": {
      "description": "S3 file url entity",
      "type": "object",
      "properties": {
        "imageExists": {
          "type": "boolean"
        },
        "imageUrl": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SchedulerJob": {
      "type": "object",
      "properties": {
        "metadata": {
          "type": "object",
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "properties": {
            "cycles": {
              "type": "integer"
            },
            "interval": {
              "type": "integer"
            }
          }
        },
        "status": {
          "type": "object",
          "properties": {
            "cycleNumber": {
              "type": "integer"
            },
            "error": {
              "type": "string"
            },
            "lastRunTime": {
              "$ref": "#/definitions/v1.Time"
            },
            "lastSuccessfulRunTime": {
              "$ref": "#/definitions/v1.Time"
            },
            "nextRunTime": {
              "$ref": "#/definitions/v1.Time"
            }
          }
        }
      }
    },
    "v1alpha1.SchedulerJobs": {
      "type": "array",
      "uniqueItems": true,
      "items": {
        "$ref": "#/definitions/v1alpha1.SchedulerJob"
      }
    },
    "v1alpha1.Scope": {
      "type": "string",
      "enum": [
        "system",
        "tenant",
        "project"
      ]
    },
    "v1alpha1.ServiceManifest": {
      "description": "Service manifest information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ServiceManifestSpec"
        }
      }
    },
    "v1alpha1.ServiceManifestSpec": {
      "type": "object",
      "properties": {
        "manifests": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.GitRepoFileContent"
          }
        },
        "name": {
          "type": "string"
        },
        "version": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1alpha1.ServiceVersion": {
      "description": "Service version information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.ServiceVersionSpec"
        }
      }
    },
    "v1alpha1.ServiceVersionSpec": {
      "type": "object",
      "properties": {
        "latestVersion": {
          "$ref": "#/definitions/v1alpha1.GitRepoFileContent"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroAwsClusterEntity": {
      "description": "Spectro AWS cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.AwsClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AwsMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroAzureClusterEntity": {
      "description": "Spectro Azure cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudType",
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.AzureClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.AzureMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroBareMetalClusterActivateEntity": {
      "description": "Activate request for the BareMetal Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.BareMetalMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1.SpectroBareMetalClusterEntity": {
      "description": "Spectro BareMetal cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "profileUid"
          ],
          "properties": {
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroCluster": {
      "description": "SpectroCluster is the Schema for the spectroclusters API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterStatus"
        }
      }
    },
    "v1alpha1.SpectroClusterAssetEntity": {
      "description": "Spectro cluster asset",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "kubeconfig"
          ],
          "properties": {
            "kubeconfig": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroClusterHealthCondition": {
      "description": "Spectro cluster health condition",
      "properties": {
        "message": {
          "type": "string"
        },
        "relatedObject": {
          "type": "object",
          "$ref": "#/definitions/v1.RelatedObject"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterHealthStatus": {
      "description": "Spectro cluster health status",
      "properties": {
        "conditions": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterHealthCondition"
          }
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterMetrics": {
      "description": "Spectro cluster metrics",
      "properties": {
        "cpu": {
          "$ref": "#/definitions/v1alpha1.ComputeMetrics"
        },
        "memory": {
          "$ref": "#/definitions/v1alpha1.ComputeMetrics"
        }
      }
    },
    "v1alpha1.SpectroClusterNotifications": {
      "description": "Spectro cluster notifications",
      "properties": {
        "isAvailable": {
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.SpectroClusterPackValues": {
      "$ref": "#/definitions/v1alpha1.PackValues"
    },
    "v1alpha1.SpectroClusterPackValuesList": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.PackValues"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroClusterSpec": {
      "description": "SpectroClusterSpec defines the desired state of SpectroCluster",
      "type": "object",
      "properties": {
        "cloudConfigRef": {
          "description": "CloudConfigRef point to the cloud configuration for the cluster, input by user Ref types are: AwsCloudConfig/VsphereCloudConfig/BaremetalConfig/ etc this user config will be used to generate cloud specific cluster/machine spec for cluster-api For VM, it will contain information needed to launch VMs, like cloud account, instance type For BM, it will contain actual baremetal machines",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "cloudType": {
          "type": "string",
          "enum": [
            "aws",
            "gcp",
            "azure",
            "vsphere",
            "openstack",
            "baremetal",
            "all"
          ]
        },
        "clusterProfileRef": {
          "description": "ClusterProfileRef point to the ClusterProfile which contains ClusterProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterProfileTemplate": {
          "description": "when a cluster created from a clusterprofile at t1, ClusterProfileTemplate is a copy of the draft version or latest published version of the clusterprofileSpec.clusterprofileTemplate then clusterprofile may evolve to v2 at t2, but before user decide to upgrade the cluster, it will stay as it is when user decide to upgrade, clusterProfileTemplate will be updated from the clusterprofile pointed by ClusterProfileRef",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        }
      }
    },
    "v1alpha1.SpectroClusterStatus": {
      "description": "SpectroClusterStatus",
      "type": "object",
      "properties": {
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.APIEndpoint"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          },
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.LoadBalancerService"
          },
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterStatusEntity": {
      "description": "Cluster status entity",
      "type": "object",
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterStatus"
        }
      }
    },
    "v1alpha1.SpectroClusterSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.CloudConfigMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
            }
          }
        },
        "status": {
          "description": "Spectro cluster status summary",
          "properties": {
            "health": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterHealthStatus"
            },
            "metrics": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterMetrics"
            },
            "notifications": {
              "$ref": "#/definitions/v1alpha1.SpectroClusterNotifications"
            },
            "state": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.SpectroClusterUidStatusSummary": {
      "description": "Spectro cluster status summary",
      "properties": {
        "apiEndpoints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.APIEndpoint"
          }
        },
        "conditions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.ClusterCondition"
          }
        },
        "health": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterHealthStatus"
        },
        "services": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.LoadBalancerService"
          }
        },
        "state": {
          "description": "current operational state",
          "type": "string"
        }
      }
    },
    "v1alpha1.SpectroClusterUidSummary": {
      "description": "Spectro cluster summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "description": "Spectro cluster spec summary",
          "type": "object",
          "properties": {
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.CloudConfigMeta"
            },
            "cloudaccount": {
              "$ref": "#/definitions/v1alpha1.CloudAccountMeta"
            },
            "clusterProfileTemplate": {
              "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.SpectroClusterUidStatusSummary"
        }
      }
    },
    "v1alpha1.SpectroClusters": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroCluster"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroClustersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.SpectroClusterSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.SpectroVsphereClusterEntity": {
      "description": "Spectro vSphere cluster entity for create and update",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "type": "object",
          "required": [
            "cloudAccountUid",
            "cloudConfig",
            "profileUid"
          ],
          "properties": {
            "cloudAccountUid": {
              "type": "string"
            },
            "cloudConfig": {
              "$ref": "#/definitions/v1alpha1.VsphereClusterConfig"
            },
            "machinepoolconfig": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigEntity"
              }
            },
            "packValues": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/v1alpha1.PackValuesEntity"
              }
            },
            "profileUid": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.StorageAccountEntity": {
      "description": "Azure Storage Account Entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Subscription": {
      "description": "Azure Subscription Type",
      "type": "object",
      "properties": {
        "authorizationSource": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "subscriptionId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.SysLogin": {
      "description": "System admin login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        }
      }
    },
    "v1alpha1.SystemServiceLogin": {
      "description": "System service login input",
      "type": "object",
      "properties": {
        "serviceName": {
          "type": "string",
          "enum": [
            "ally",
            "jet",
            "git"
          ]
        },
        "spectroClusterUid": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.Team": {
      "description": "Team information",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TeamSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.TeamStatus"
        }
      }
    },
    "v1alpha1.TeamPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.TeamRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "teamId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TeamSpec": {
      "description": "Team specifications",
      "properties": {
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "users": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.TeamSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "users": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.TeamStatus": {
      "description": "Team status",
      "type": "object"
    },
    "v1alpha1.TeamSummary": {
      "description": "Team summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TeamSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.TeamStatus"
        }
      }
    },
    "v1alpha1.Teams": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Team"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.TeamsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.TeamSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.Tenant": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TenantSpec"
        }
      }
    },
    "v1alpha1.TenantEntity": {
      "description": "Tenant Entity",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.TenantSpecEntity"
        }
      }
    },
    "v1alpha1.TenantPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.TenantSamlSpec": {
      "description": "Tenant",
      "type": "object",
      "properties": {
        "federationMetadata": {
          "type": "string"
        },
        "identityProvider": {
          "type": "string"
        },
        "isSsoEnabled": {
          "type": "boolean"
        },
        "serviceProviderMetadata": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantSpec": {
      "description": "Tenant Spec",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "planUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.TenantSpecEntity": {
      "description": "Tenant Entity input",
      "type": "object",
      "properties": {
        "authType": {
          "type": "string"
        },
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "orgName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.Tenants": {
      "description": "Tenants list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.Tenant"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.TenantsAccountsNas": {
      "type": "object",
      "properties": {
        "failures": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "success": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UidRoleSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserStatus"
        }
      }
    },
    "v1alpha1.UserActivateInfo": {
      "type": "object",
      "properties": {
        "passwordToken": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpecEntity"
        }
      }
    },
    "v1alpha1.UserLogin": {
      "description": "User login input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "password": {
          "type": "string",
          "format": "password"
        },
        "tenantOrg": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserMe": {
      "description": "User information wrt permissions",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserMeStatus"
        }
      }
    },
    "v1alpha1.UserMeStatus": {
      "description": "User status with permissions",
      "properties": {
        "activationLink": {
          "description": "Contains activation link for the user",
          "type": "string"
        },
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "projectPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "tenant": {
          "description": "users's tenant information",
          "$ref": "#/definitions/v1alpha1.UserMeTenant"
        },
        "tenantPermissions": {
          "type": "object",
          "additionalProperties": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      }
    },
    "v1alpha1.UserMeTenant": {
      "type": "object",
      "properties": {
        "orgName": {
          "type": "string"
        },
        "tenantUid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserMeta": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "org": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserPatch": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/v1.HttpPatch"
      }
    },
    "v1alpha1.UserRoleMap": {
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserRoleUIDs": {
      "type": "object",
      "properties": {
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserRolesEntity": {
      "type": "object",
      "properties": {
        "inheritedRoles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.UserSpecSummary": {
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        },
        "teams": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.UidSummary"
          }
        }
      }
    },
    "v1alpha1.UserStatus": {
      "description": "User status",
      "properties": {
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "lastSignIn": {
          "description": "user's last sign in time",
          "$ref": "#/definitions/v1.Time"
        }
      }
    },
    "v1alpha1.UserSummary": {
      "description": "User summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserSpecSummary"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.UserStatus"
        }
      }
    },
    "v1alpha1.UserToken": {
      "description": "Auth token response",
      "type": "object",
      "properties": {
        "Authorization": {
          "type": "string"
        }
      }
    },
    "v1alpha1.UserUpdateEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.UserUpdateSpecEntity"
        }
      }
    },
    "v1alpha1.UserUpdateSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.Users": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.User"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.UsersSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.UserSummary"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VirtualNetwork": {
      "description": "Azure virtual network",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.AzureSubnet"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereAccount": {
      "description": "VSphere account information",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudAccount"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.CloudAccountStatus"
        }
      }
    },
    "v1alpha1.VsphereAccounts": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereAccount"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereCloudConfig": {
      "description": "VsphereCloudConfig is the Schema for the vspherecloudconfigs API",
      "type": "object",
      "properties": {
        "apiVersion": {
          "description": "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
          "type": "string"
        },
        "kind": {
          "description": "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudConfigSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudConfigStatus"
        }
      }
    },
    "v1alpha1.VsphereCloudConfigSpec": {
      "description": "VsphereCloudConfigSpec defines the desired state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "cloudAccountRef",
        "clusterConfig",
        "machinePoolConfig"
      ],
      "properties": {
        "cloudAccountRef": {
          "description": "cloudAccountRef should point to the secret which contains VsphereCloudAccount",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "clusterConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereClusterConfig"
        },
        "machinePoolConfig": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfig"
          }
        }
      }
    },
    "v1alpha1.VsphereCloudConfigStatus": {
      "description": "VsphereCloudConfigStatus defines the observed state of VsphereCloudConfig",
      "type": "object",
      "required": [
        "ansibleDigest"
      ],
      "properties": {
        "ansibleDigest": {
          "type": "string"
        },
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereImage"
          }
        },
        "roleDigest": {
          "description": "this map will be for ansible roles present in eack pack",
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "useCapiImage": {
          "description": "If no ansible roles found in Packs then Mold should tell Drive to use capi image and not create custom image, because there is nothing to add",
          "type": "boolean"
        }
      }
    },
    "v1alpha1.VsphereCloudConfigSummary": {
      "description": "vSphere cloud config summary",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "specSummary": {
          "description": "vSphere cloud config spec summary",
          "type": "object",
          "properties": {
            "cloudaccount": {
              "$ref": "#/definitions/v1alpha1.CloudAccountMeta"
            },
            "clusterConfig": {
              "$ref": "#/definitions/v1alpha1.VsphereClusterConfig"
            },
            "machinePoolConfig": {
              "description": "vSphere template machine pool meta information",
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1.VsphereMachinePoolConfigMeta"
              }
            }
          }
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.VsphereCloudConfigStatus"
        }
      }
    },
    "v1alpha1.VsphereCloudConfigsSummary": {
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereCloudConfigSummary"
          }
        },
        "metadata": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VsphereClusterConfig": {
      "type": "object",
      "required": [
        "network",
        "placement"
      ],
      "properties": {
        "network": {
          "description": "Network placement",
          "$ref": "#/definitions/v1alpha1.VsphereNetworkConfig"
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
        },
        "sshKeys": {
          "description": "SSHKeys specifies a list of ssh authorized keys for the 'spectro' user",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereComputeCluster": {
      "description": "Compute cluster resources",
      "type": "object",
      "properties": {
        "computecluster": {
          "type": "string"
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereDatacenter": {
      "description": "Array of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereDatacenterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereComputeCluster"
          }
        },
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "folders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VsphereDatacenters": {
      "description": "Array of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereDatacenter"
          }
        }
      }
    },
    "v1alpha1.VsphereImage": {
      "description": "A generated Image should always be a template which resides inside vsphere Will not generate a OVA file out of the image OVA can be used as a base input of the os pack, that's internal to the pack",
      "type": "object",
      "properties": {
        "fullPath": {
          "description": "full path of the image template location it contains datacenter/folder/templatename etc eg: /mydc/vm/template/spectro/workerpool-1-centos",
          "type": "string"
        },
        "state": {
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereInstanceType": {
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.VsphereMachine": {
      "description": "Vsphere cloud VM definition",
      "type": "object",
      "properties": {
        "apiVersion": {
          "type": "string"
        },
        "kind": {
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/v1.ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1.VsphereMachineSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.VsphereMachineStatus"
        }
      }
    },
    "v1alpha1.VsphereMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        }
      }
    },
    "v1alpha1.VsphereMachinePoolConfig": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "infraProfileRef": {
          "description": "InfraProfileRef point to the ClusterProfile which contains InfraProfileTemplate",
          "$ref": "#/definitions/v1.ObjectReference"
        },
        "infraProfileTemplate": {
          "description": "InfraProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplate"
        },
        "instanceType": {
          "description": "InstanceType defines the required CPU, Memory, Storage",
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1.VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1.VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1.MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1.VsphereMachinePoolConfigMeta": {
      "type": "object",
      "properties": {
        "infraProfileTemplate": {
          "description": "InfraClusterProfile contains OS/Kernel for this NodePool",
          "$ref": "#/definitions/v1alpha1.ClusterProfileTemplateMeta"
        },
        "instanceType": {
          "description": "instance type",
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placementConfig": {
          "description": "placement config",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1.VsphereMachineSpec": {
      "description": "Vsphere cloud VM definition spec",
      "type": "object",
      "required": [
        "vcenterServer",
        "nics",
        "placement"
      ],
      "properties": {
        "images": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereImage"
          }
        },
        "instanceType": {
          "$ref": "#/definitions/v1alpha1.VsphereInstanceType"
        },
        "nics": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereNic"
          }
        },
        "ntpServers": {
          "description": "NTPServers is a list of NTP servers to use instead of the machine image's default NTP server list.",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "placement": {
          "description": "Placement configuration",
          "$ref": "#/definitions/v1alpha1.VspherePlacementConfig"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereMachineStatus": {
      "description": "Vsphere machine status",
      "type": "object",
      "properties": {
        "health": {
          "$ref": "#/definitions/v1alpha1.MachineHealth"
        },
        "instanceState": {
          "type": "string"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1.MachineStatus"
        }
      }
    },
    "v1alpha1.VsphereMachines": {
      "description": "Vsphere machine list",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1.VsphereMachine"
          }
        },
        "listmeta": {
          "$ref": "#/definitions/v1.ListMetaData"
        }
      }
    },
    "v1alpha1.VsphereNetworkConfig": {
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "networkName": {
          "description": "NetworkName is the name of the network in which VMs are created/located.",
          "type": "string"
        }
      }
    },
    "v1alpha1.VsphereNic": {
      "description": "Vsphere network interface",
      "type": "object",
      "required": [
        "networkName"
      ],
      "properties": {
        "index": {
          "type": "integer",
          "format": "int8"
        },
        "macAddress": {
          "type": "string"
        },
        "networkName": {
          "type": "string"
        },
        "privateIPs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1.VspherePlacementConfig": {
      "type": "object",
      "required": [
        "datacenter",
        "datastore"
      ],
      "properties": {
        "cluster": {
          "type": "string"
        },
        "datacenter": {
          "description": "Datacenter is the name or inventory path of the datacenter where this machine's VM is created/located.",
          "type": "string"
        },
        "datastore": {
          "description": "Datastore is the datastore in which VMs are created/located.",
          "type": "string"
        },
        "folder": {
          "description": "Folder is the folder in which VMs are created/located.",
          "type": "string"
        },
        "imageTemplateFolder": {
          "description": "ImageTemplateFolder is the folder in which VMs templates are created/located.",
          "type": "string"
        },
        "resourcePool": {
          "description": "ResourcePool is the resource pool in which VMs are created/located.",
          "type": "string"
        }
      }
    },
    "v1alpha1.ZoneEntity": {
      "description": "Azure zone entity",
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1ApiEndpoint": {
      "description": "APIEndpoint represents a reachable Kubernetes API endpoint.",
      "type": "object",
      "required": [
        "host",
        "port"
      ],
      "properties": {
        "host": {
          "description": "The hostname on which the API server is serving.",
          "type": "string"
        },
        "port": {
          "description": "The port on which the API server is serving.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1AwsCloudAccount": {
      "type": "object",
      "required": [
        "accessKey",
        "secretKey"
      ],
      "properties": {
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "v1alpha1AwsMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "instance type",
          "type": "string"
        },
        "rootDeviceSize": {
          "description": "rootDeviceSize in GBs",
          "type": "integer",
          "format": "int64",
          "maximum": 2000,
          "minimum": 1
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1AwsSubnetEntity"
          }
        }
      }
    },
    "v1alpha1AwsMachinePoolConfigEntities": {
      "description": "Update request for the AWS Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1AwsMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1AwsMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1AwsMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1AwsSubnetEntity": {
      "properties": {
        "az": {
          "type": "string"
        },
        "id": {
          "type": "string"
        }
      }
    },
    "v1alpha1AzureCloudAccount": {
      "type": "object",
      "required": [
        "tenantId",
        "clientId",
        "clientSecret"
      ],
      "properties": {
        "clientId": {
          "description": "Client ID(Directory ID) is a unique identifier generated by Azure AD that is tied to an application",
          "type": "string"
        },
        "clientSecret": {
          "description": "ClientSecret is the secret associated with Client",
          "type": "string"
        },
        "tenantId": {
          "description": "Tenant ID is the ID for the Azure AD tenant that the user belongs to.",
          "type": "string"
        }
      }
    },
    "v1alpha1AzureMachinePoolCloudConfigEntity": {
      "type": "object",
      "properties": {
        "azs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "instanceType": {
          "description": "Instance type stands for VMSize in Azure",
          "type": "string"
        },
        "osDisk": {
          "$ref": "#/definitions/v1alpha1AzureOSDisk"
        }
      }
    },
    "v1alpha1AzureMachinePoolConfigEntities": {
      "description": "Update request for the Azure Spectro cluster",
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1AzureMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1AzureMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1AzureMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    },
    "v1alpha1AzureOSDisk": {
      "type": "object",
      "properties": {
        "diskSizeGB": {
          "type": "integer",
          "format": "int32"
        },
        "managedDisk": {
          "$ref": "#/definitions/v1alpha1ManagedDisk"
        },
        "osType": {
          "type": "string",
          "enum": [
            "linux",
            "windows"
          ]
        }
      }
    },
    "v1alpha1ClusterCondition": {
      "type": "object",
      "required": [
        "type",
        "status"
      ],
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/v1Time"
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/v1Time"
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "v1alpha1LoadBalancerService": {
      "type": "object",
      "properties": {
        "host": {
          "description": "IP or Host from svc.Status.LoadBalancerStatus.Ingress",
          "type": "string"
        },
        "name": {
          "description": "name of the loadbalancer service",
          "type": "string"
        },
        "ports": {
          "description": "port this service exposed",
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1ServicePort"
          }
        }
      }
    },
    "v1alpha1MachinePoolConfigEntity": {
      "description": "BareMetal machine pool configuration API entity",
      "type": "object",
      "required": [
        "name",
        "size",
        "labels"
      ],
      "properties": {
        "isControlPlane": {
          "description": "whether this pool is for control plane",
          "type": "boolean",
          "x-omitempty": false
        },
        "labels": {
          "description": "labels for this pool, example: master/worker, gpu, windows",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "size": {
          "description": "size of the pool, number of machines",
          "type": "integer",
          "format": "int32"
        },
        "useControlPlaneAsWorker": {
          "description": "if IsControlPlane==true \u0026\u0026 useControlPlaneAsWorker==true, then will remove master taint this will not be used for worker pools",
          "type": "boolean",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1MachinePoolProfileConfigEntity": {
      "type": "object",
      "required": [
        "infraProfileUid"
      ],
      "properties": {
        "infraProfileUid": {
          "description": "InfraClusterProfile uid for the machine pool",
          "type": "string"
        },
        "packValues": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1PackValuesEntity"
          }
        }
      }
    },
    "v1alpha1ManagedDisk": {
      "description": "Azure Machine Spec Managed Disk",
      "properties": {
        "storageAccountType": {
          "type": "string"
        }
      }
    },
    "v1alpha1MsgSubscriber": {
      "description": "Message subscriber request",
      "type": "object",
      "properties": {
        "accountId": {
          "type": "string"
        },
        "publisher": {
          "type": "string"
        },
        "service": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "v1alpha1PackValuesEntity": {
      "description": "Pack values entity to refer the existing pack for the values overrride",
      "type": "object",
      "required": [
        "tag",
        "name"
      ],
      "properties": {
        "name": {
          "type": "string"
        },
        "tag": {
          "type": "string"
        },
        "values": {
          "type": "string"
        }
      }
    },
    "v1alpha1Plan": {
      "description": "Plan",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1PlanSpec"
        }
      }
    },
    "v1alpha1PlanCost": {
      "description": "Plan Cost",
      "properties": {
        "discount": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        },
        "price": {
          "type": "number",
          "format": "float",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PlanCpuCoreHoursUsages": {
      "type": "object",
      "properties": {
        "hourlyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceUsage"
          }
        }
      }
    },
    "v1alpha1PlanLimit": {
      "description": "Monthly Plan Limit",
      "properties": {
        "cpuCoreHours": {
          "description": "cpu cores hours",
          "type": "integer",
          "format": "int64",
          "x-omitempty": false
        },
        "overageLimitPercentage": {
          "description": "overage limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 25,
          "x-omitempty": false
        },
        "warnLimitPercentage": {
          "description": "warning limit in percentage",
          "type": "integer",
          "format": "int8",
          "default": 90,
          "x-omitempty": false
        }
      }
    },
    "v1alpha1PlanMonthlyUsage": {
      "description": "Plan monthly usage entity",
      "properties": {
        "dailyUsages": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ResourceUsage"
          }
        },
        "month": {
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1PlanLimit"
        },
        "totalMonthlyUsage": {
          "$ref": "#/definitions/v1alpha1TotalResourceUsage"
        }
      }
    },
    "v1alpha1PlanMonthlyUsages": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1PlanMonthlyUsage"
          }
        }
      }
    },
    "v1alpha1PlanSpec": {
      "description": "Plan specifications",
      "properties": {
        "cost": {
          "$ref": "#/definitions/v1alpha1PlanCost"
        },
        "expiry": {
          "$ref": "#/definitions/v1Time"
        },
        "planLimit": {
          "$ref": "#/definitions/v1alpha1PlanLimit"
        }
      }
    },
    "v1alpha1ProjectMeta": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1ProjectResourceUsage": {
      "description": "project resource usage",
      "properties": {
        "cpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        },
        "project": {
          "$ref": "#/definitions/v1alpha1ProjectMeta"
        }
      }
    },
    "v1alpha1ProjectRolesEntity": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UidRoleSummary"
          }
        }
      }
    },
    "v1alpha1ProjectRolesPatch": {
      "type": "object",
      "properties": {
        "projects": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "projectUid": {
                "type": "string"
              },
              "roles": {
                "type": "array",
                "items": {
                  "type": "string"
                }
              }
            }
          }
        }
      }
    },
    "v1alpha1ResourceUsage": {
      "description": "ResourceUsage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ProjectResourceUsage"
          }
        },
        "timestamp": {
          "$ref": "#/definitions/v1Time"
        },
        "totalCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1ServicePort": {
      "type": "object",
      "required": [
        "port"
      ],
      "properties": {
        "port": {
          "description": "The port that will be exposed by this service.",
          "type": "integer",
          "format": "int32"
        },
        "protocol": {
          "type": "string"
        }
      }
    },
    "v1alpha1TotalResourceUsage": {
      "description": "Total Resource Usage",
      "properties": {
        "projects": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1ProjectResourceUsage"
          }
        },
        "totalCpuCoreHours": {
          "type": "number",
          "x-omitempty": false
        }
      }
    },
    "v1alpha1UidRoleSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/v1alpha1UidSummary"
          }
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1UidSummary": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "v1alpha1User": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UserSpec"
        },
        "status": {
          "$ref": "#/definitions/v1alpha1UserStatus"
        }
      }
    },
    "v1alpha1UserEntity": {
      "description": "User",
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/v1ObjectMeta"
        },
        "spec": {
          "$ref": "#/definitions/v1alpha1UserSpecEntity"
        }
      }
    },
    "v1alpha1UserSpec": {
      "description": "User specifications",
      "properties": {
        "emailId": {
          "description": "User's email id",
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1UserSpecEntity": {
      "description": "User Entity input",
      "type": "object",
      "properties": {
        "emailId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "teams": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1UserStatus": {
      "description": "User status",
      "properties": {
        "isActive": {
          "description": "Specifies if user account is active/disabled",
          "type": "boolean"
        },
        "lastSignIn": {
          "$ref": "#/definitions/v1Time"
        }
      }
    },
    "v1alpha1VsphereCloudAccount": {
      "type": "object",
      "required": [
        "vcenterServer",
        "username",
        "password"
      ],
      "properties": {
        "insecure": {
          "description": "Insecure is a flag that controls whether or not to validate the vSphere server's certificate.",
          "type": "boolean",
          "x-omitempty": false
        },
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "vcenterServer": {
          "description": "VcenterServer is the address of the vSphere endpoint",
          "type": "string"
        }
      }
    },
    "v1alpha1VsphereComputeCluster": {
      "description": "Compute cluster resources",
      "type": "object",
      "properties": {
        "computecluster": {
          "type": "string"
        },
        "resourcePools": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1VsphereDatacenter": {
      "description": "Array of Datacenter with computeclusters",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "datacenter": {
          "type": "string"
        }
      }
    },
    "v1alpha1VsphereDatacenterResources": {
      "description": "Datacenter and its resources like datastore, resoucepool, folders",
      "type": "object",
      "properties": {
        "computeclusters": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1VsphereComputeCluster"
          }
        },
        "datastores": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "folders": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "networks": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "v1alpha1VsphereDatacenters": {
      "description": "Array of Datacenters with computeclusters",
      "type": "object",
      "required": [
        "items"
      ],
      "properties": {
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/v1alpha1VsphereDatacenter"
          }
        }
      }
    },
    "v1alpha1VsphereInstanceType": {
      "type": "object",
      "properties": {
        "diskGiB": {
          "description": "DiskGiB is the size of a virtual machine's disk, in GiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        },
        "memoryMiB": {
          "description": "MemoryMiB is the size of a virtual machine's memory, in MiB. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int64"
        },
        "numCPUs": {
          "description": "NumCPUs is the number of virtual processors in a virtual machine. Defaults to the analogue property value in the template from which this machine is cloned.",
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "v1alpha1VsphereMachinePoolCloudConfigEntity": {
      "type": "object",
      "required": [
        "instanceType"
      ],
      "properties": {
        "instanceType": {
          "$ref": "#/definitions/v1alpha1VsphereInstanceType"
        }
      }
    },
    "v1alpha1VsphereMachinePoolConfigEntities": {
      "type": "object",
      "properties": {
        "spec": {
          "type": "object",
          "required": [
            "machinePoolConfig"
          ],
          "properties": {
            "machinePoolConfigs": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/v1alpha1VsphereMachinePoolConfigEntity"
              }
            }
          }
        }
      }
    },
    "v1alpha1VsphereMachinePoolConfigEntity": {
      "type": "object",
      "required": [
        "cloudConfig"
      ],
      "properties": {
        "cloudConfig": {
          "$ref": "#/definitions/v1alpha1VsphereMachinePoolCloudConfigEntity"
        },
        "poolConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolConfigEntity"
        },
        "profileConfig": {
          "$ref": "#/definitions/v1alpha1MachinePoolProfileConfigEntity"
        }
      }
    }
  }
}